[{"title":"[大餐]写个Kotlin+MVP+Retrofit2+RxJava2+Daggers2的示例代码","url":"http://halohoop.com/2017/06/27/meals-kotlin_mvp_retrofit2_rxjava2_dagger2_demo/","content":"<h2 id=\"源码：\"><a href=\"#源码：\" class=\"headerlink\" title=\"源码：\"></a>源码：</h2><p><strong><a href=\"https://github.com/halohoop/Kotlin_Mvp_R2R2D2\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/Kotlin_Mvp_R2R2D2</a></strong></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p><img src=\"/2017/06/27/meals-kotlin_mvp_retrofit2_rxjava2_dagger2_demo/demo0.gif\" alt=\"demo0\"></p>\n<ul>\n<li>try<br><a href=\"https://github.com/halohoop/Kotlin_Mvp_R2R2D2/releases/download/v1.0/app-release_v1.0.apk\" target=\"_blank\" rel=\"external\">Donwload APK</a></li>\n</ul>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><ul>\n<li><strong>Demo的功能是显示，自己的Github 和 大神的Github 之间相差多少个Followers.</strong></li>\n<li><p>三个接口:</p>\n<ul>\n<li>1.<del><a href=\"https://api.github.com/search/users?q={id}\" target=\"_blank\" rel=\"external\">https://api.github.com/search/users?q={id}</a></del></li>\n<li>2.<a href=\"http://halohoop.com/halohoop_custom_datas/meals-kotlin_mvp_retrofit2_rxjava2_dagger2_demo/user1.json\">http://halohoop.com/halohoop_custom_datas/meals-kotlin_mvp_retrofit2_rxjava2_dagger2_demo/user1.json</a></li>\n<li>3.<a href=\"https://api.github.com/users/{id}\" target=\"_blank\" rel=\"external\">https://api.github.com/users/{id}</a></li>\n</ul>\n</li>\n<li><p>使用Retrofit2请求上述api；</p>\n</li>\n<li>使用Dagger2注入对象；</li>\n<li>整体架构使用MVP；</li>\n<li>P层使用RxJava2辅助过度连接M层和V层；</li>\n</ul>\n<h2 id=\"Use-Android-Studio-Version\"><a href=\"#Use-Android-Studio-Version\" class=\"headerlink\" title=\"Use Android Studio Version\"></a>Use Android Studio Version</h2><ul>\n<li>3.0 Canary 4</li>\n</ul>\n<h2 id=\"Thanks-for\"><a href=\"#Thanks-for\" class=\"headerlink\" title=\"Thanks for\"></a>Thanks for</h2><ul>\n<li><a href=\"https://github.com/grantland/android-autofittextview\" target=\"_blank\" rel=\"external\">https://github.com/grantland/android-autofittextview</a></li>\n<li><a href=\"https://github.com/robinhood/ticker\" target=\"_blank\" rel=\"external\">https://github.com/robinhood/ticker</a></li>\n</ul>\n","categories":["programming"],"tags":["android","kotlin","meals","MVP","Retrofit2","RxJava2","Daggers2"]},{"title":"[饼干]ViewPager配套滑动回调onPageScrolled","url":"http://halohoop.com/2017/06/24/cookies-android_vp_onpagescrolled/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>ViewPager配套滑动回调ViewPager.OnPageChangeListener有三个方法：</p>\n<pre><code>void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);\nvoid onPageSelected(int position);\nvoid onPageScrollStateChanged(int state);\n</code></pre><p>不用过多解释，是人都会用，但是有一个方法比较复杂，三个参数的onPageScrolled，每次使用都要打印着看看到底这三个参数到底是什么，有什么规律。</p>\n<p><strong>在这里，将这三个参数在这里做一个一目了然的阐述，以便下一次再用的时候直接上手，节省时间。</strong></p>\n<ul>\n<li>首先，这个方法是在手指滑动的时候不断会回调的，和move事件一样，参数1最复杂，我们放到最后讲。</li>\n<li>参数2：positionOffset：<ul>\n<li>取值范围是[0, 1).</li>\n<li>手指右滑（包括释放手指后的同一个趋势的运动），数值变化范围(1→0]，越来越小，最后一次回调给你一个0。</li>\n<li>手指左滑（包括释放手指后的同一个趋势的运动），数值变化范围[0→1)，越来越大，但是<strong>最后一次回调也给你一个0</strong>，也就是到0.99..之后就变回0。</li>\n</ul>\n</li>\n<li>参数3：positionOffsetPixels：<ul>\n<li>和positionOffset套路完全一样，只是数值换成了像素，要注意手指左滑最后的从最大变回0的细节.</li>\n</ul>\n</li>\n<li><p>参数1：position，有点复杂的规则：</p>\n<ul>\n<li>滑动的时候，一般可见的是两页，那么这个参数就是给你第一个可见的页面.<ul>\n<li>比如，如果当前处于第1页，前面还有第0页，后面有第2页，像这样[0,<strong>1</strong>,2…]:<ul>\n<li>手指右滑，那么position会一直给你0，最后一次回调给你0，因为滑动的时候可见的是0和1，滑动完成后可见的是0.</li>\n<li>手指左滑，那么position会一直给你1，最后一次回调给你2，因为滑动的时候可见的是1和2，滑动完成后可见的是2.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>源码中的注释还有一段描述如下：<ul>\n<li>“Page position+1 will be visible if positionOffset is nonzero”,综合上面描述，我们也能发现这个规律，也就是当可见positionOffset不为0的时候，position+1的页面是可见的，可能处于滑动（或者释放手指后的滑动）中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Stay hungry stay foolish!</p>\n</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n","categories":["programming"],"tags":["cookies","view","android","ViewPager"]},{"title":"[点心]ViewPager动画类库原码解析","url":"http://halohoop.com/2017/06/24/snacks-vp_anima_detail/","content":"<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\"><script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <div id=\"security\"> <div class=\"input-container\"> <input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" Please enter the password to read the blog. \" /> <label for=\"pass\"> Please enter the password to read the blog. </label> <div class=\"bottom-line\"></div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> 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 </div>","categories":["programming"],"tags":["android","effect","snacks","animation","PageTransformer"]},{"title":"[露水]ViewPager动画类库","url":"http://halohoop.com/2017/06/23/dewdrops-vp_anima/","content":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>图片比较大，可能需要加载一会儿。</p>\n<p><img src=\"/2017/06/23/dewdrops-vp_anima/demo0.gif\" alt=\"demo0\"></p>\n<h1 id=\"原码解析\"><a href=\"#原码解析\" class=\"headerlink\" title=\"##原码解析##\"></a><a href=\"http://halohoop.com/2017/06/24/snacks-vp_anima_detail/\"><strong>##原码解析##</strong></a></h1>","categories":["programming"],"tags":["android","dewdrops","effect"]},{"title":"[露水]review setContentView","url":"http://halohoop.com/2017/06/22/dewdrops-setcontentview/","content":"<p>今晚重温了一下setContentView的整个流程，留下点东西，图一张。</p>\n<p><img src=\"/2017/06/22/dewdrops-setcontentview/demo0.png\" alt=\"demo0\"></p>\n","categories":["tricks"],"tags":["android","dewdrops"]},{"title":"[露水]小故事，大学问","url":"http://halohoop.com/2017/06/18/dewdrops-six_principle/","content":"<p>一个人骑着单车走了二里地，他老婆依偎在车后座，他们是去接小孩放学，小孩叫迪迪，然后扔下单车开车走了。</p>\n","categories":["tricks"],"tags":["dewdrops"]},{"title":"[饼干]ViewDragHelper.Callback.onEdgeLock是干嘛的么","url":"http://halohoop.com/2017/06/17/cookies-android_viewdraghelper_callback/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>ViewDragHelper.Callback提供给我们很多回调，灰常方便，网上很多文章都非常棒和详细，如果你还不知道ViewDragHelper这个神器怎么用，那你先去看看这些<a href=\"http://46aae4d1e2371e4aa769798941cef698.devproxy.yunshipei.com/hbl_for_android/article/details/51485827\" target=\"_blank\" rel=\"external\">文章</a>，不然下文你也看不懂。</p>\n<p>有一个回调大家都没有在意，或者说描述的含糊不清，这里要说的回调就是：</p>\n<pre><code>@Override\npublic boolean onEdgeLock(int edgeFlags) {\n    return false;\n}\n</code></pre><p>默认是返回false，从方法字面上去理解，那就是边缘锁定，我试着判断一个边缘然后返回true看看，是否边缘拖拽就失效了呢，代码如下：</p>\n<pre><code>@Override\npublic boolean onEdgeLock(int edgeFlags) {\n    return (edgeFlags&amp;ViewDragHelper.EDGE_LEFT)==ViewDragHelper.EDGE_LEFT;\n}\n</code></pre><p>显然结果和我预料的并不一样，难道这个方法是要手动调用的咩？这个时候咋办呢，当然是看源码，记住，一切答案都在源码。</p>\n<p><img src=\"/2017/06/17/cookies-android_viewdraghelper_callback/demo0.png\" alt=\"demo0\"></p>\n<p>注意1278行，源码中确实调用了onEdgeLock，为什么没有跑到这句，这里有些线索，比如：</p>\n<ul>\n<li>absDelta &lt; absODelta * 0.5f，绝对值后新旧数据的比较</li>\n</ul>\n<p>但是线索还不够，那就往上爬，找到checkNewEdgeDrag方法被调用的地方。当是LEFT和RIGHT的时候传入的是dx和dy，而TOP和BOTTOM的时候传入的是dy和dx，dx和dy调换了位置，恍然大悟了。</p>\n<p><img src=\"/2017/06/17/cookies-android_viewdraghelper_callback/demo1.png\" alt=\"demo1\"></p>\n<p>不多说，我把代码直接翻译成中文：</p>\n<ul>\n<li>当想要锁住的是<strong>左</strong>或者<strong>右</strong>的时候，如果<strong>左右</strong>滑动的距离还没<strong>上下</strong>滑动的距离的一半多，那就走回调onEdgeLock()；</li>\n<li>当想要锁住的是<strong>上</strong>或者<strong>下</strong>的时候，如果<strong>上下</strong>滑动的距离还没<strong>左右</strong>滑动的距离的一半多，那就走回调onEdgeLock()；</li>\n</ul>\n<p>当我们开启了边缘锁定模式，像这样：</p>\n<pre><code>viewDragHelper.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);//这里锁定左边\n</code></pre><p>之后，我们在左边缘<strong>上下</strong>滑动的时候，就能够走回调onEdgeLock方法了。</p>\n<p>看看红框框出来的部分，</p>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ul>\n<li><p>微信边滑退出，识别是边滑的时候锁定只能是左右滑，而不能是上下滑。</p>\n<ul>\n<li>当然我们可以自己在别的ViewDragHelper.Callback的回调中做限制,比如clampViewPositionHorizontal和clampViewPositionVertical，但是，神经病啊，用原生的不用你写那么多的判断逻辑啊。</li>\n</ul>\n</li>\n<li><p>我写的Demo在这里，请享用：</p>\n<ul>\n<li><a href=\"https://github.com/halohoop/AndroidDigIn/blob/c4d530b5943ab79e7dd6dc3dbbff1f6a76e214be/app/src/main/java/com/halohoop/androiddigin/widgets/DragViewGroup.java\" target=\"_blank\" rel=\"external\">DragViewGroup.java</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>答案都在源码.</li>\n<li>Stay hungry stay foolish!</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n","categories":["programming"],"tags":["cookies","view","android","ViewDragHelper"]},{"title":"[饼干]FragmentManager的popBackStack的使用","url":"http://halohoop.com/2017/06/16/cookies-frag_manager_popstack/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><ul>\n<li><p>用法：</p>\n<pre><code>//自己以上所有，不包括自己\ngetSupportFragmentManager().popBackStack(&quot;rt&quot;, 0);\n//自己以上所有，包括自己\ngetSupportFragmentManager().popBackStack(&quot;rt&quot;, 1);\n//最上层的一个\ngetSupportFragmentManager().popBackStack(null, 0);\n//最上层的一个\ngetSupportFragmentManager().popBackStack();\n//全部pop\ngetSupportFragmentManager().popBackStack(null, 1);\n</code></pre></li>\n<li><p>注意：</p>\n<ul>\n<li>popBackStack传入的第一个参数是addToBackStack(name)传入的参数，而不是Fragment的Tag；</li>\n<li>如果遇到两个name相同的连在一起的时候，两个移除，三个相同的就三个都移除…示例代码：<ul>\n<li>getFragmentManager().popBackStack(“rt”, 1); <ul>\n<li>也就是说，查找栈的顺序是先从后入栈的开始查找往下找，找到一个之后还继续找下一个如果还是一样的name就再找一个直到不是为止，然后将是的一并pop出栈。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实例代码Demo\"><a href=\"#实例代码Demo\" class=\"headerlink\" title=\"实例代码Demo\"></a>实例代码Demo</h2><p><a href=\"https://github.com/halohoop/AndroidDigIn#20fragmentmanager的popbackstack的使用\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/AndroidDigIn</a></p>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n<ul>\n<li>Stay hungry stay foolish!</li>\n</ul>\n","categories":["programming"],"tags":["cookies","android","Fragment"]},{"title":"[露水]adb无线调试","url":"http://halohoop.com/2017/06/15/dewdrops-adb_wifi/","content":"<p>条件：</p>\n<ul>\n<li>一台开发版手机</li>\n<li>两个命令：<ul>\n<li>adb tcpip 55555</li>\n<li>adb yourDevicesIp:55555</li>\n</ul>\n</li>\n</ul>\n<p>比如：</p>\n<pre><code>[win cmd]\nD:\\workspaces\\androidstudio\\project&gt;adb tcpip 55555\nD:\\workspaces\\androidstudio\\project&gt;adb connect 192.168.199.156:55555\nconnected to 192.168.199.156:55555\n</code></pre><p><strong>无线调试还支持 instant run 和 Debug 咧。</strong></p>\n<p><a href=\"https://developer.android.com/studio/command-line/adb.html#wireless\" target=\"_blank\" rel=\"external\">参考</a></p>\n","categories":["tricks"],"tags":["dewdrops"]},{"title":"[饼干]Kotlin Trick 003-滚吧工具类","url":"http://halohoop.com/2017/06/14/cookies-kotlin-trick-003/","content":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>class Utils {\n    public static char getLastChar(String str){\n        return str.charAt(s.length()-1);\n    }\n}\n</code></pre><p>调用:</p>\n<pre><code>char c = Utils.getLastChar(&quot;halohoop.com&quot;);//得到m\n</code></pre><h2 id=\"Annoying：\"><a href=\"#Annoying：\" class=\"headerlink\" title=\"Annoying：\"></a>Annoying：</h2><p>增加类</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><p>不需要增加额外的类。</p>\n<pre><code>//扩展属性\ninline val String.lastC: Char\n    get() = get(length - 1)\n</code></pre><p>或者：</p>\n<pre><code>//扩展方法\ninline fun String.getLastChar() : Char{\n    return get(length-1)\n}\n</code></pre><p>调用:</p>\n<pre><code>var c = &quot;halohoop.com&quot;.lastC//得到m\n</code></pre><p>或者</p>\n<pre><code>var c = &quot;halohoop.com&quot;.getLastChar()//得到m\n</code></pre>","categories":["programming"],"tags":["cookies","android","kotlin"]},{"title":"[饼干]Kotlin Trick 002-滚吧重载方法","url":"http://halohoop.com/2017/06/13/cookies-kotlin-trick-002/","content":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>void test(int i){\n}\nvoid test(String j){\n}\nvoid test(int i, String j){\n}\n</code></pre><p>调用:</p>\n<pre><code>test(1);\ntest(&quot;aaa&quot;);\ntest(1,&quot;aaa&quot;);\n</code></pre><h2 id=\"Annoying：\"><a href=\"#Annoying：\" class=\"headerlink\" title=\"Annoying：\"></a>Annoying：</h2><p>写太多重载了，眼都花了</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><pre><code>//一个足矣\nfun test(i:int = 0, j:String = &quot;&quot;){\n}\n</code></pre><p>调用:</p>\n<pre><code>test();//有默认值，可以不用传\ntest(1);\ntest(1,&quot;aaa&quot;);\ntest(j = &quot;aaa&quot;);//非第一个需要传递参数名字，这也能增加可读性\n</code></pre>","categories":["programming"],"tags":["cookies","android","kotlin"]},{"title":"[大餐]加快gradle构建速度","url":"http://halohoop.com/2017/06/13/meals-speedup_gradle_build/","content":"<p><em>本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</em></p>\n<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>AS中gradle构建一般可以分为三种，</p>\n<p>1.从0开始构建，Full Build；</p>\n<p>2.修改源代码后构建，之前构建过，Incremental build java change；</p>\n<p>3.修改资源文件后构建，之前构建过，Incremental build resource change。</p>\n<p>从这三方面其实都可以有切入点来进行提速，gradle插件3.0做了大改，优化了很多东西，包括gradle依赖系统以及缓存系统，这些都是直接影响构建速度的因素，整理了有10+个小技巧可以加快我们的构建速度，下面请听我一一道来。</p>\n<h2 id=\"正餐：\"><a href=\"#正餐：\" class=\"headerlink\" title=\"正餐：\"></a>正餐：</h2><h3 id=\"技巧1：使用最新版本的gradle插件\"><a href=\"#技巧1：使用最新版本的gradle插件\" class=\"headerlink\" title=\"技巧1：使用最新版本的gradle插件\"></a>技巧1：使用最新版本的gradle插件</h3><pre><code>buildscript {\n    repositories {\n        maven { url &apos;https://maven.google.com&apos; }\n        jcenter()\n    }\n    dependencies {\n        classpath &apos;com.android.tools.build:gradle:3.0.0-alpha1&apos;\n    }\n    ...\n}\n</code></pre><p>看到google.com之后，相信你应该知道要拿个“梯子”的，所以我说升级as最方便嘛，而现在gradle的版本已经更新到alpha1+了(现在是2017年06月12日)，根据谷歌官方只要是3.0+，也就是以2017I/O大会的版本开始就可以。</p>\n<h3 id=\"技巧2：避免使用legacy-multidex\"><a href=\"#技巧2：避免使用legacy-multidex\" class=\"headerlink\" title=\"技巧2：避免使用legacy multidex\"></a>技巧2：避免使用legacy multidex</h3><p>当app方法数量超过64k的时候就会编译失败，早期版本的构建系统按如下方式报告这一错误：</p>\n<pre><code>Conversion to Dalvik format failed:\nUnable to execute dex: method ID not in [0, 0xffff]: 65536\n</code></pre><p>较新版本的 Android 构建系统虽然显示的错误不同，但指示的是同一问题：</p>\n<pre><code>trouble writing output:\nToo many field references: 131000; max is 65536.\nYou may try using --multi-dex option.\n</code></pre><p>使用multidex分包处理是谷歌官方给我们提供的解决方案，由于分包被内置支持在5.0以及之后，当我们需要兼容的版本跨越5.0也就是api21的时候，比如说14–23，那么我们需要使用兼容库：</p>\n<pre><code>com.android.support:multidex:1.0.0\n</code></pre><p>使用兼容库能让我们的低版本的也进行分包处理，<a href=\"https://developer.android.com/studio/build/multidex.html#about\" target=\"_blank\" rel=\"external\">具体如何操作gradle需要配置什么Application需要如何设置</a>等不是本文重点，请各位自行谷歌、百度。</p>\n<p>根据谷歌官方描述，使用兼容库会明显拖慢构建，也就是如果你的调试机器版本低于5.0，又进行了分包处理，那么当你点击那个绿色构建按钮▶或者使用命令行gradlew构建的时候，那你可以先去吃一顿饭先了（Just kidding!）。</p>\n<p>所以我们在开发调试的时候尽量使用高版本的手机5.0+，等功能完成了，后面做兼容低版本的时候再使用低版本的手机进行调试。可能有人会说，我在开发功能的时候如果不实时调试低版本的兼容问题后期可能有问题，关于这一点，我想说的是一点是经验问题，经验足的人就是能够知道你这段代码写出来可能的结果，这是内功，不可言状，却又确实存在的能力，我见过这样的人，你没写出来他就能够知道运行的结果，另一点是我们需要相信google的兼容团队给我们的兼容方案是能够解决绝大部分的兼容问题的，我指的兼容方案是指使用appcompat、support等之类的兼容库。</p>\n<h3 id=\"技巧3：关闭multi-apk\"><a href=\"#技巧3：关闭multi-apk\" class=\"headerlink\" title=\"技巧3：关闭multi apk\"></a>技巧3：关闭multi apk</h3><p>如果你的项目需要编译出多个density或者多个abi（CPU架构）的APK，那么这也是开发构建的时候不需要做的操作，因为在你手上调试的机器只是一种density一种abi，因此我们在构建的时候可以将<a href=\"https://developer.android.com/studio/build/configure-apk-splits.html\" target=\"_blank\" rel=\"external\">multi-apk</a>的构建给去除。可以进行如下配置：</p>\n<pre><code>splits {\n    density {\n        //enable true\n        enable false\n        ...\n    }\n    abi {\n        //enable true\n        enable false\n        ...\n    }\n}\n</code></pre><p>但是显然这趟配置影响全局配置，后期还可能忘记改回来，更灵活一点的方式可以这样：</p>\n<pre><code>android {\n    ...\n    splits {\n        ...\n    ｝\n    if(project.hasProperty(&apos;HaloDevBuild&apos;)){\n        splits.abi.enable = false;\n        splits.density.enable = false;\n    }\n    ...\n}\n</code></pre><p>或者，可以更加细致一点：</p>\n<pre><code>android {\n    ...\n    splits {\n        ...\n    ｝\n    if(project.hasProperty(&apos;HaloDevBuild&apos;)){\n        splits.density.enable = false\n        splits.abi {\n            enable true\n            reset()\n            include &apos;arm64-v8a&apos; //select ABIs to build APKs for\n            universalApk false //whether generate an additional APK that contains all the ABIs\n        }\n        aaptOptions.cruncherEnabled = false\n    }\n    ...\n}\n</code></pre><p>注意project没有s，不是projects。<strong>并且这个判断的代码必须置于splits块的下面，否则就可能设置完之后就又被覆盖回来了</strong><br>“HaloDevBuild”属性的字符串我们可以自定义，在gradle写好这个判断之后，我们就可以在命令行编译了，命令如下：</p>\n<pre><code>./gradlew 项目名:变体 -PHaloDevBuild\n</code></pre><p>比如：</p>\n<pre><code>gradlew app:assembleDevelopmentDebug -PHaloDevBuild\n</code></pre><p>又或者可以构建顺带安装了：</p>\n<pre><code>gradlew demo:installdevelopmentDebug -PHaloDevBuild\n</code></pre><p>-P之后表示要传递的属性。当然我们如果需要在as中点击绿色构建按钮▶编译，那就要设置一下每次都要传入属性：</p>\n<p><img src=\"/2017/06/13/meals-speedup_gradle_build/demo0.png\" alt=\"demo0\"></p>\n<p>另外，我们可以这样获取Android手机CPU/ABI型号：</p>\n<pre><code>String CPU_ABI = android.os.Build.CPU_ABI;//过时了\nString CPU_ABIs[] = android.os.Build.SUPPORTED_ABIS;\n</code></pre><h3 id=\"技巧4：使用最少的资源打包\"><a href=\"#技巧4：使用最少的资源打包\" class=\"headerlink\" title=\"技巧4：使用最少的资源打包\"></a>技巧4：使用最少的资源打包</h3><p>和上面的思路一样，我们开发调试的时候只需要用到一种语言和一套资源文件。所以我们打包的时候不需要将所有的东西都放到这个调试的apk中。我们可以采用<a href=\"https://developer.android.com/studio/build/build-variants.html\" target=\"_blank\" rel=\"external\">定义变体</a>的方式来完成，注意下面的resConfigs属性指定了要保留的素材资源文件和语言资源文件。</p>\n<pre><code>android {\n    ...\n    flavorDimensions &quot;dev&quot;\n    productFlavors {\n        development {\n            dimension &quot;dev&quot;\n            resConfigs &quot;en&quot;, &quot;xxhdpi&quot;\n            ...\n        }\n    }\n}\n</code></pre><h3 id=\"技巧5-关闭aapt对png的优化\"><a href=\"#技巧5-关闭aapt对png的优化\" class=\"headerlink\" title=\"技巧5:关闭aapt对png的优化\"></a>技巧5:关闭aapt对png的优化</h3><p>aapt打包时候对资源图片的处理也会耗时，这里主要针对PNG，我们可以暂时关闭这种处理，还是用到上面的技巧，gradle配置如下：</p>\n<pre><code>android {\n    ...\n    if(projects.hasProperty(&apos;HaloDevBuild&apos;)){\n        splits.abi.enable = false;\n        splits.density.enable = false;\n        aaptOptions.cruncherEnabled = false\n    }\n    ...\n}\n</code></pre><p>当然如果我们将PNG转为webP也可以是一种优化方案。as2.3+支持直接转换，右键直接png图片选则convert to webP。当然webP是有版本要求的，所以请注意其用法，非本文重点自行百度了解。</p>\n<h3 id=\"技巧6：使用instant-run\"><a href=\"#技巧6：使用instant-run\" class=\"headerlink\" title=\"技巧6：使用instant run\"></a>技巧6：使用instant run</h3><p>多使用instant run，根据谷歌的描述，as3.0和2.0的instant run有巨大的差别，做了很多的优化，instant run要求调试的机器必须要在api21或者以上，而不是你的项目最小版本要在21或者以上。还有一点就是使用instant run的时候，如果我们首次构建是从0开始的，那么会比不使用instant run慢一点，因为需要为后面的instant run的冷热交换去准备一些额外的东西，然而如果后面一直都使用instant run，那么首次构建的延缓的时间就能很快被挽回来。</p>\n<h3 id=\"技巧7：避免写一些不必要的更改\"><a href=\"#技巧7：避免写一些不必要的更改\" class=\"headerlink\" title=\"技巧7：避免写一些不必要的更改\"></a>技巧7：避免写一些不必要的更改</h3><p>有些开发者为了方便会直接使用时间戳来作为每次构建的版本号（或者是自己的一套计算算法），像这样：</p>\n<pre><code>def buildDataTime = new Date().format(&apos;yyMMddHHmm&apos;).toInteger()\nandroid {\n    ...\n    defaultConfig {\n        versionCode buildDateTime\n        ...\n    }\n}\n</code></pre><p>这个一定程度上方便了我们，但是对于gradle构建系统来说，这不是好事。由于每次版本号都有修改，这就直接导致清单文件Manifest的更改。而清单文件的修改势必会趋势构建系统重新审视整个项目情况，这会增加很多额外的时间，这在开发调试的时候根本没有必要。</p>\n<p>还是利用上面的技巧，我们可以这样：</p>\n<pre><code>def buildDataTime = project.hasProperty(&apos;HaloDevBuild&apos;)? 100 : new Date().format(&apos;yyMMddHHmm&apos;).toInteger()\nandroid {\n    ...\n    defaultConfig {\n        versionCode buildDateTime\n        ...\n    }\n}\n</code></pre><h3 id=\"技巧8：类库不要使用动态的版本\"><a href=\"#技巧8：类库不要使用动态的版本\" class=\"headerlink\" title=\"技巧8：类库不要使用动态的版本\"></a>技巧8：类库不要使用动态的版本</h3><p>项目中可能会这样配置：</p>\n<pre><code>dependencies {\n    ...\n    compile &apos;com.android.support:appcompat-v7:+&apos;\n}\n</code></pre><p>这个加号+，导致gradle每次构建都要检查新的版本。即使你希望每次都用最新但是还是不好，因为库可能已经有很大的变化了，但是你是基于旧版开发的，所以为了安全不要这样设置。其实这和我们coding还是一样的道理，我们码代码的时候肯定会考虑如何能让别人的修改不影响到我们自己的，因此这个加号使不得，使不得。</p>\n<h3 id=\"技巧9：查看jvm使用的内存是否合适\"><a href=\"#技巧9：查看jvm使用的内存是否合适\" class=\"headerlink\" title=\"技巧9：查看jvm使用的内存是否合适\"></a>技巧9：查看jvm使用的内存是否合适</h3><p><img src=\"/2017/06/13/meals-speedup_gradle_build/demo1.png\" alt=\"demo1\"></p>\n<p>我一般设置为2g，这个根据项目的不同可能会有不同效果，所以可以试着稍微调整一下。</p>\n<h3 id=\"技巧10：打开gradle新的缓存机制\"><a href=\"#技巧10：打开gradle新的缓存机制\" class=\"headerlink\" title=\"技巧10：打开gradle新的缓存机制\"></a>技巧10：打开gradle新的缓存机制</h3><p>我们可以通过一个设置使用这种新的缓存机制，如下：</p>\n<pre><code>//在gradle.properties中+一行\norg.gradle.caching=true\n</code></pre><p>文章开头也提到过，Gradle 3.5（现在20170612的gradle版本已经4.0了）新的机制，可以缓存所有任务的输出。这个和as2.3时候介绍的build 缓存不一样，build 缓存只缓存预dex的外部libs。而任何时候的构建缓存其实都是可复用的，比如切换分支之后，还可以用其他分支时候的构建缓存。</p>\n<p>当然，根据谷歌官方描述，这个设置的背后还有很多需要完善的地方，使用的同时，我们可以有更多后期优化的期待。</p>\n<h3 id=\"技巧11：使用新的依赖机制\"><a href=\"#技巧11：使用新的依赖机制\" class=\"headerlink\" title=\"技巧11：使用新的依赖机制\"></a>技巧11：使用新的依赖机制</h3><p>按照官方的描述，gradle3.0之前，构建系统的依赖关系被认为是一种完全错误的方式，举一个例子：</p>\n<p>app依赖了库libX，库libX又依赖库libY。</p>\n<p>app：</p>\n<pre><code>compile &apos;libX&apos;\n</code></pre><p>libX：</p>\n<pre><code>compile &apos;libY&apos;\n</code></pre><p>如果在app中调用了libY的方法，这个时候如果libY中的方法做了改变，那么由于libY被和libX和app都有依赖被依赖关系，这时候如果构建libY势必会导致libX和app也重新构建。</p>\n<p>这应该是个完全错误的依赖方式，正确的方式应该是既然app只依赖了libX那就不应该知道libY中的api，然而这在构建系统3.0（gradle插件）之前都是这样存在的，因此3.0做了改变，引入了新的依赖形式，api和implementation来替换compile。</p>\n<ul>\n<li>implementation：表示我依赖你，但是你的api不会被我重新分享出去了。</li>\n<li>api：表示我依赖你，但是你的api会被我重新分享出去了。</li>\n</ul>\n<p>那么在看上面的例子就变成了：</p>\n<p>app：</p>\n<pre><code>implementation &apos;libX&apos;\n</code></pre><p>libX：</p>\n<pre><code>api &apos;libY&apos;\n</code></pre><p>由于存在之前的这种依赖传递的错误机制，因此我们项目中很可能就出现了这种依赖传递之后导致一个小修改就把所有库都构建一遍的情况，因此我们花一些时间将一些库的compile都替换成api和impementation对我们是有好处的，一来有效缩短构建时间，而来真正搞清楚项目中依赖的情况，那些api需要依赖传递，哪些不需要。</p>\n<p>当然我们还是可以继续使用compile，不过这种方式已经是过时的了，我们只要更新了最新插件，那么新建了项目就会发现所有的compile都会被换成了implementation。相关的修改还有androidTestImplementation和testImplementation，对应的是原来的androidTestCompile和testCompile。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>根据上述技巧，我写了一个小demo：</p>\n<p><a href=\"https://github.com/halohoop/SpeedUpGradleBuild2\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/SpeedUpGradleBuild2</a></p>\n<ul>\n<li>Stay hungry stay foolish!</li>\n</ul>\n","categories":["programming"],"tags":["android","meals","gradle","构建"]},{"title":"[大餐]开发摘记1--我的Fragment通信的框架","url":"http://halohoop.com/2017/06/09/meals-android-fishing/","content":"<p>如果把通信比作钓鱼，如果每次都有鱼上钩，那么我想可以分为以下四种：</p>\n<ul>\n<li>1.鱼钩上<strong>不钩</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线断了，连线带钩和鱼都没了。</li>\n<li>2.鱼钩上<strong>钩上</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线断了，连线带钩和鱼带饵料都没了。</li>\n<li>3.鱼钩上<strong>不钩</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线<strong>没断</strong>，连线带钩和鱼带饵料都<strong>拉回来</strong>了。</li>\n<li>4.鱼钩上<strong>钩上</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线<strong>没断</strong>，连线带钩和鱼带饵料都<strong>拉回来</strong>了。</li>\n</ul>\n<p>其实这四种就可以对应着四种不同的通信：</p>\n<ul>\n<li>1.A向发了一个<strong>空的通知</strong>让B响应了，A不需要知道B是否响应(鱼线断了)。</li>\n<li>2.A向发了一个<strong>携带参数的通知</strong>让B响应了，A不需要知道B是否响应(鱼线断了)。</li>\n<li>3.A向发了一个<strong>空的通知</strong>让B响应了，A需要知道B是否响应，最终A得到了B响应结果(鱼线完好，成功回收)。</li>\n<li>4.A向发了一个<strong>携带参数的通知</strong>让B响应了，A需要知道B是否响应，最终A得到了B响应结果(鱼线完好，成功回收)。</li>\n</ul>\n<p>再说的简单一点，那就是：</p>\n<ul>\n<li>1.调用“void func()”方法，无参无返回值。</li>\n<li>2.调用“void func(P p)”方法，有参无返回值。</li>\n<li>3.调用“R func()”方法，无参有返回值。</li>\n<li>4.调用“R func(P p)”方法，有参有返回值。</li>\n</ul>\n<p>因为通信无非就是这四种方法，那么就可以抽象出来的这四类方法的类，如果使用四个容器装着，在合适的时候往里添加，并且在合适的时候取出来调用，那么势必可以变成一个解耦通信框架。</p>\n<p>后面会陆续记录开发这个小框架的心路历程。</p>\n<hr>\n<p><img src=\"/2017/06/09/meals-android-fishing/demo0.png\" alt=\"\"></p>\n<p>项目地址：</p>\n<p><a href=\"https://github.com/halohoop/Fishing\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/Fishing</a></p>\n<p>已经可以正常使用了。</p>\n","categories":["programming"],"tags":["view","android","meals","开发摘记"]},{"title":"[露水]你知道卫语句不","url":"http://halohoop.com/2017/06/08/dewdrops-weiyuju/","content":"<h3 id=\"卫语句\"><a href=\"#卫语句\" class=\"headerlink\" title=\"卫语句\"></a>卫语句</h3><p>在<a href=\"http://halohoop.com/2017/06/08/dewdrops-weiyuju/《阿里巴巴Java开发手册》.pdf\">《阿里巴巴Java开发手册》.pdf</a>中的15页有提到“卫语句”，如下图。</p>\n<p><img src=\"/2017/06/08/dewdrops-weiyuju/demo0.png\" alt=\"demo0\"></p>\n<p>说的是：</p>\n<h3 id=\"我们不要这样写：\"><a href=\"#我们不要这样写：\" class=\"headerlink\" title=\"我们不要这样写：\"></a>我们不要这样写：</h3><pre><code>if(){\n\n}else if(){\n\n}else if(){\n\n}...\n</code></pre><h3 id=\"而要这样写\"><a href=\"#而要这样写\" class=\"headerlink\" title=\"而要这样写\"></a>而要这样写</h3><pre><code>if(){\n    return;\n}\nif(){\n    return;\n}\nif(){\n    return;\n}\n</code></pre><p>虽然不是很明白更深层的原因，但是我表示对后面那一句“或者状态模式来实现”很有感触，因为正在做的一个小框架就打算使用状态模式来摒弃一堆的if-else判断。</p>\n","categories":["programming"],"tags":["dewdrops"]},{"title":"[露水]客观，有时候需要精分","url":"http://halohoop.com/2017/06/08/dewdrops-be_objective/","content":"<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\"><script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <div id=\"security\"> <div class=\"input-container\"> <input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" Please enter the password to read the blog. \" /> <label for=\"pass\"> Please enter the password to read the blog. </label> <div class=\"bottom-line\"></div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> 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 </div>","categories":["tricks"],"tags":["dewdrops"]},{"title":"[露水]多看书有多重要","url":"http://halohoop.com/2017/06/06/dewdrops-importance-of-books/","content":"<p>多看书有多重要，为了拓展思维，在大脑留下更多的种子，也许你没有全部记住，但是你留下了种子，日后接触到相关的内容(肥料)的时候，你可以快速的回来生根发芽。</p>\n","categories":["tricks"],"tags":["dewdrops"]},{"title":"[饼干]安卓小秘密-不扩大view宽高增加其可触控范围","url":"http://halohoop.com/2017/06/06/cookies-android-touchdelegate/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>今天我要记录的是<strong>TouchDelegate</strong>，有很多人应该都不知道还有这个东西，知道的孩子都没你们事了，都散了散了吧，不知道的请往下看。其实也不算什么秘密，只要你仔细的走过神迹一样的事件分发的源码，很容易发现的。</p>\n<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><p>如下图，有这样一个场景，View a 需要有这么大，比如可以是一个按钮，UI要求显示View a的黑框部分，但是为了更好的用户体验，我们一般会增大其触控范围，比如点击绿框中都能够触发a的事件，咋做？（说好的不卖关子的呢？）</p>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo0.png\" alt=\"demo0\"></p>\n<h2 id=\"Don’t-do\"><a href=\"#Don’t-do\" class=\"headerlink\" title=\"Don’t do:\"></a>Don’t do:</h2><ul>\n<li>增加a的Padding?<ul>\n<li>后期如果修改bgColor，那么不好了，绿色框内全变色。</li>\n</ul>\n</li>\n<li>套多一层透明的FrameLayout？<ul>\n<li>增加布局复杂度，我TM一脚飞死你。 </li>\n</ul>\n</li>\n<li>自定义view限制绘制区域？<ul>\n<li>写完了？你很棒！但是你可以收拾包袱走人了。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-should-do-How-to-use-TouchDelegate-：\"><a href=\"#What-should-do-How-to-use-TouchDelegate-：\" class=\"headerlink\" title=\"What should do (How to use TouchDelegate)：\"></a>What should do (How to use TouchDelegate)：</h2><p>要学会站在巨人的肩膀，要知道，<strong>“你遇到的，巨人也会遇到”</strong>，巨人给我们留下了<strong>TouchDelegate</strong></p>\n<h3 id=\"直接上菜：\"><a href=\"#直接上菜：\" class=\"headerlink\" title=\"直接上菜：\"></a>直接上菜：</h3><p>注意方法ViewGroup.setTouchDelegate(Rect,View)</p>\n<p>以下代码出自我一个自定义View—<a href=\"https://github.com/halohoop/UsoppBubble/blob/master/lib/src/main/java/com/halohoop/usoppbubble/widget/UsoppBubble.java\" target=\"_blank\" rel=\"external\">UsoppBubble.java</a></p>\n<pre><code>@Override\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n    super.onLayout(changed, left, top, right, bottom);\n    if (changed) {\n        float largedSize = (bottom - top) * mTouchAreaLargerRatio;//乘以放大倍数\n        int deltaY = (int) (largedSize - (bottom - top));\n        int deltaX = largedSize &gt; (right - left) ? (int) (largedSize - (right - left)) : 0;\n        ViewGroup vg = (ViewGroup) getParent();\n        Rect rect = new Rect(left - deltaX, top - deltaY, right + deltaX, bottom + deltaY);\n        //构建出来的Rect对象就相当于绿色框框，而this就是这个view的实例。\n        vg.setTouchDelegate(new TouchDelegate(rect, this));\n    }\n}\n</code></pre><p>相信上述代码是极度容易的，ViewGroup.setTouchDelegate(Rect,View)接受两个参数：</p>\n<ul>\n<li>可触控区域。</li>\n<li>谁(哪个子view)需要用这个可触控区域。</li>\n</ul>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ul>\n<li>QQ消息气泡可触控区域</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo1.png\" alt=\"demo1\"></p>\n<ul>\n<li>当然我也模仿qq做了一个<a href=\"https://github.com/halohoop/UsoppBubble\" target=\"_blank\" rel=\"external\">自己的消息气泡版本</a></li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo2.gif\" alt=\"demo2\"></p>\n<ul>\n<li>小米贴边悬浮球点击唤醒</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo3.png\" alt=\"demo3\"></p>\n<ul>\n<li>锤子的闪念胶囊贴边点击唤醒</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo4.png\" alt=\"demo4\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>View.setTouchDelegate(Rect,View)，这句还不够吗？还要我怎样？</li>\n<li>你遇到的，巨人也会遇到，如果换位思考一下，你就是“巨人”，那么子View获取到的触摸事件是从ViewGroup分发下来的，那么如果在分发之前加一些条件判断，比如区域什么的，那么TouchDelegate这玩意儿是不是就出来了呢？</li>\n<li>Stay hungry stay foolish!</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n<hr>\n<p>确保这文章被看完了，我在上面留了一个无伤大雅的bug，不知道有人发现没有，那就是：</p>\n<p><em>setTouchDelegate其实是View的方法。而ViewGroup : View，无伤大雅。</em></p>\n","categories":["programming"],"tags":["cookies","view","android"]},{"title":"[饼干]Kotlin Trick 001-省略一些重复的工作","url":"http://halohoop.com/2017/06/05/cookies-kotlin-trick-001/","content":"<p>好的文章有时候不在于鸿篇巨制，而在于一目了然，有时候这种快餐小技巧更能帮助人，没有铺垫没有客套，直戳掌握知识的要害。所以从这篇开始会不间断的记录一些小技巧，文章已[饼干]开头的都是一篇短文。</p>\n<p>一些重复的工作，比如说我们在性能调优的时候经常用到的Trace，以下是一个实例：</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>Trace.beginSection(sectionName);\ndoSomeCalculation();\nTrace.endSection();\n</code></pre><h2 id=\"Annoying：\"><a href=\"#Annoying：\" class=\"headerlink\" title=\"Annoying：\"></a>Annoying：</h2><p>如果在每个地方都加入<strong>Trace.beginSection(sectionName)和Trace.endSection()</strong>会疯掉的，搞不好还忘记加Trace.endSection()。</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><p>利用kotlin的扩展方法特性，我们能够这样操作</p>\n<pre><code>inline fun trace(sectionName: String, body: () -&gt; Unit) {\n    Trace.beginSection(sectionName)\n    try {\n        body()\n    } finally {\n        Trace.endSection()\n    }\n}\n//and use it\ntrace(&quot;foo&quot;) {\n    doSomeCalculation()\n}\n</code></pre><p>这样我们就可以把Trace.beginSection(sectionName)和Trace.endSection()省略了。<br>甚至你还可以有返回值：</p>\n<pre><code>inline fun &lt;T&gt; trace(sectionName: String, body: () -&gt; T): T {\n    Trace.beginSection(sectionName)\n    try {\n        return body()\n    } finally {\n        Trace.endSection()\n    }\n}\n\n//and use it\nval result = trace(&quot;foo&quot;) {\n    doSomeCalculation()\n}\n</code></pre><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>实际上这种方式是方法拓展，lambda带给我们的额便利，同样的技巧，相信你能应用到Trace以外更多的地方，相信你能接触到更好的用法。</strong></p>\n","categories":["programming"],"tags":["cookies","android","kotlin"]},{"title":"[点心]小清新加载等待控件","url":"http://halohoop.com/2017/06/04/roll_loading/","content":"<p><em>本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</em></p>\n<p>控件源码：<a href=\"https://github.com/halohoop/RollSquareView\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/RollSquareView</a></p>\n<p>正文</p>\n<p>背景<br>从锤子手机上看到的效果，锤子系统更新界面的入口按钮就是这个加载动画。</p>\n<p>效果图</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo3.gif\" alt=\"demo1\"> 图1(效果图1)</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo2.gif\" alt=\"demo2\"> 图2(效果图2)</p>\n<p>使用方式</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo.png\" alt=\"demo3\"> 图3(使用说明图)</p>\n<ul>\n<li>half_rect_width:半个方块的宽度，单位dp</li>\n<li>rect_divier_width:方块之间间隔宽度，单位dp</li>\n<li>start_empty_position:初始空出的位置</li>\n<li>is_clockwise:是否顺时针旋转</li>\n<li>line_count:一行的数量，最少为3</li>\n<li>fix_round_cornor:固定的方框的圆角半径</li>\n<li>roll_round_cornor:旋转的方框的圆角半径，如果这两个圆角半径设置成不一样的值就会得到上面图1的效果，设置成一样就是图2.</li>\n<li>roll_when_show_stop_when_hide:是否自动开始自定旋转，如果设置为false，则需要手动调用startRoll()方法(下文会提到)才会开始运动，设置为true则设置View.Visibility就会自动开始旋转。</li>\n<li>square_color:方块的颜色。使用十六进制代码的形式（如：#333、#8e8e8e）</li>\n</ul>\n<p>讲解实现方法之前，首先要说明一下方格的排列方式是从左到右，从上到下，也就是如果line_count设置为3，那么方格的序号如下图：</p>\n<p><img src=\"/2017/06/04/roll_loading/notice1.png\" alt=\"demo3\"> 图4(序号排列说明)</p>\n<p>实现思路：<br>自定义控件最主要的就是如何去准备要展示给用户看的东西，东西有了之后，我们在onDraw方法里面按部就班的画出来就可以了。接下来就带大家来走一走我准备的整个过程。其实整个过程就像做菜，准备材料（准备数据），加调味料（处理初始数据），翻炒（编写逻辑），这一切都是在锅中完成的，这个锅就是我们的onDraw方法，我们把所有的一些都准备好，然后扔进锅（onDraw）里面。</p>\n<p>最终的绘制分为两步：</p>\n<ul>\n<li>绘制固定的方块</li>\n<li>绘制滚动的方块</li>\n</ul>\n<p>当运动的时候将固定的方框中的两个方块隐藏，然后让滚动的方块继承其中一个的位置，然后通过属性动画改变其位置的值以及旋转角度的值，最终调用invalidate()重绘让其动起来。</p>\n<p><img src=\"/2017/06/04/roll_loading/notice3.png\" alt=\"demo3\"> 图5(绘制原理图示)</p>\n<p>①（控件精髓就在此处）根据配置准备绘制的数据</p>\n<p>处理自定义属性：</p>\n<pre><code>private void initAttrs(Context context, AttributeSet attrs) {\n    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.RollSquareView);\n    //行列数\n    mLineCount = typedArray.getInteger(R.styleable.RollSquareView_line_count, 3);\n    //旋转的方块圆角\n    mRollRoundCornor = typedArray.getFloat(R.styleable.RollSquareView_roll_round_cornor, 10);\n    ...\n    其他属性省略，请大家看源码\n\n    //开始的空格位置\n    mStartEmptyPosition = typedArray.getInteger(R.styleable.RollSquareView_start_empty_position, 0);\n    if (isInsideTheRect(mStartEmptyPosition, mLineCount)) {\n        mStartEmptyPosition = 0;\n    }\n    //当动态滚动的时候实时更新的空格位置\n    mCurrEmptyPosition = mStartEmptyPosition;\n    typedArray.recycle();\n}\n</code></pre><p>当选择空格位置不是外围的方块序号的时候，自动选择0位置，判断是否外围一圈的算法如下，纯数学知识：</p>\n<p><img src=\"/2017/06/04/roll_loading/notice2.png\" alt=\"demo3\"> 图6(绿色框出来的就是非外围的方块)</p>\n<pre><code>private boolean isInsideTheRect(int pos, int lineCount) {\n    if (pos &lt; lineCount) {//是否第一行\n        return false;\n    } else if (pos &gt; (lineCount * lineCount - 1 - lineCount)) {//是否最后一行\n        return false;\n    } else if ((pos + 1) % lineCount == 0) {//是否右边\n        return false;\n    } else if (pos % lineCount == 0) {//是否左边\n        return false;\n    }\n    //四边都不在，那就是在内部了\n    return true;\n}\n</code></pre><p>初始化方块的方法：</p>\n<pre><code>private void initSquares(int startEmptyPosition) {\n    //创建mLineCount * mLineCount个方块\n    mFixSquares = new FixSquare[mLineCount * mLineCount];\n    for (int i = 0; i &lt; mFixSquares.length; i++) {\n        mFixSquares[i] = new FixSquare();\n        mFixSquares[i].index = i;\n        mFixSquares[i].isShow = startEmptyPosition == i ? false : true;\n        mFixSquares[i].rectF = new RectF();\n    }\n    //外圈链接起来\n    linkTheOuterSquare(mFixSquares, mIsClockwise);//下文讲解\n    //创建1个滚动方块\n    mRollSquare = new RollSquare();\n    mRollSquare.rectF = new RectF();\n    mRollSquare.isShow = false;\n}\n</code></pre><p>两种方块都使用内部类定义，代码如下：</p>\n<pre><code>private class FixSquare {\n    RectF rectF;//需要绘制的方块\n    int index;//所在的序号\n    boolean isShow;//是否需要绘制\n    FixSquare next;//指向下一个需要滚动的位置，顺时针和逆时针相反\n}\n\nprivate class RollSquare {\n    RectF rectF;//需要绘制的方块\n    int index;//所在的序号\n    boolean isShow;//是否需要绘制\n    /**\n     * 旋转中心坐标\n     */\n    float cx;//滚动的时候的旋转中心x\n    float cy;//滚动的时候的旋转中心y\n}\n</code></pre><p>我们可以看到固定的方块FixSquare中有一个next变量：</p>\n<pre><code>FixSquare next;//指向下一个需要滚动的位置，顺时针和逆时针相反\n</code></pre><p>因为我们需要将外围的一圈方块都链接起来，但是现在有一个问题就是外围的方块序号并不是按照0、1、2…排列的，因此我定义了一个next变量用于指定其下一个，这样一个接一个的就把外围连成一圈了。算法如下，可能第一次看这个方法的小伙伴需要看一小会儿，因为需要适配行数3个以上的需求，因此都是动态变化的，因此都是一些数学公式，这里篇幅有限不一一讲解，大家可以顺着注释看看规律就很容易理解了，这个方法的主要目的就是为了让每个FixSquare的“FixSquare next”都赋上值，最终将外围都连成一圈，不要忘记考虑顺逆时针isClockwise这个变量哦：</p>\n<pre><code>private void linkTheOuterSquare(FixSquare[] fixSquares, boolean isClockwise) {\n    int lineCount = (int) Math.sqrt(mFixSquares.length);\n    //连接第一行\n    for (int i = 0; i &lt; lineCount; i++) {\n        if (i % lineCount == 0) {//位于最左边\n            fixSquares[i].next = isClockwise ? fixSquares[i + lineCount] : fixSquares[i + 1];\n        } else if ((i + 1) % lineCount == 0) {//位于最右边\n            fixSquares[i].next = isClockwise ? fixSquares[i - 1] : fixSquares[i + lineCount];\n        } else {//中间\n            fixSquares[i].next = isClockwise ? fixSquares[i - 1] : fixSquares[i + 1];\n        }\n    }\n    //连接最后一行\n    for (int i = (lineCount - 1) * lineCount; i &lt; lineCount * lineCount; i++) {\n        if (i % lineCount == 0) {//位于最左边\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - lineCount];\n        } else if ((i + 1) % lineCount == 0) {//位于最右边\n            fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i - 1];\n        } else {//中间\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - 1];\n        }\n    }\n    //连接左边\n    for (int i = 1 * lineCount; i &lt;= (lineCount - 1) * lineCount; i += lineCount) {\n        if (i == (lineCount - 1) * lineCount) {//如果是左下角的一个\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - lineCount];\n            continue;\n        }\n        fixSquares[i].next = isClockwise ? fixSquares[i + lineCount] : fixSquares[i - lineCount];\n    }\n    //连接右边\n    for (int i = 2 * lineCount - 1; i &lt;= lineCount * lineCount - 1; i += lineCount) {\n        if (i == lineCount * lineCount - 1) {//如果是右下角的一个\n            fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i - 1];\n            continue;\n        }\n        fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i + lineCount];\n    }\n}\n</code></pre><p>固定方块的位置，分别使用fixFixSquarePosition和fixRollSquarePosition两个方法来固定FixSquare和RollSquare：</p>\n<pre><code>private void fixFixSquarePosition(FixSquare[] fixSquares, int cx, int cy, float dividerWidth, float halfSquareWidth) {\n    //确定第一个rect的位置\n    float squareWidth = halfSquareWidth * 2;\n    int lineCount = (int) Math.sqrt(fixSquares.length);\n    float firstRectLeft = 0;\n    float firstRectTop = 0;\n    if (lineCount % 2 == 0) {//偶数\n        int squareCountInAline = lineCount / 2;\n        int diviCountInAline = squareCountInAline - 1;\n        float firstRectLeftTopFromCenter = squareCountInAline * squareWidth\n                + diviCountInAline * dividerWidth\n                + dividerWidth / 2;\n        firstRectLeft = cx - firstRectLeftTopFromCenter;\n        firstRectTop = cy - firstRectLeftTopFromCenter;\n    } else {//奇数\n        int squareCountInAline = lineCount / 2;\n        int diviCountInAline = squareCountInAline;\n        float firstRectLeftTopFromCenter = squareCountInAline * squareWidth\n                + diviCountInAline * dividerWidth\n                + halfSquareWidth;\n        firstRectLeft = cx - firstRectLeftTopFromCenter;\n        firstRectTop = cy - firstRectLeftTopFromCenter;\n    }\n    for (int i = 0; i &lt; lineCount; i++) {//行\n        for (int j = 0; j &lt; lineCount; j++) {//列\n            if (i == 0) {\n                if (j == 0) {\n                    fixSquares[0].rectF.set(firstRectLeft, firstRectTop,\n                            firstRectLeft + squareWidth, firstRectTop + squareWidth);\n                } else {\n                    int currIndex = i * lineCount + j;\n                    fixSquares[currIndex].rectF.set(fixSquares[currIndex - 1].rectF);\n                    fixSquares[currIndex].rectF.offset(dividerWidth + squareWidth, 0);\n                }\n            } else {\n                int currIndex = i * lineCount + j;\n                fixSquares[currIndex].rectF.set(fixSquares[currIndex - lineCount].rectF);\n                fixSquares[currIndex].rectF.offset(0, dividerWidth + squareWidth);\n            }\n        }\n    }\n}\n\nprivate void fixRollSquarePosition(FixSquare[] fixSquares,\n                                   RollSquare rollSquare, int startEmptyPosition) {\n    FixSquare fixSquare = fixSquares[startEmptyPosition];\n    rollSquare.rectF.set(fixSquare.next.rectF);\n}\n</code></pre><p>对于方法fixFixSquarePosition：</p>\n<ul>\n<li>通过参数有控件的中点的x和y坐标，cx和cy，加上行数，方块的宽以及方块间隔;</li>\n<li>通过以上参数很容易就可以通过计算得出第0个方块的left和top值，分别是firstRectLeft和firstRectTop；</li>\n<li>因为行数可能是奇数也可能是偶数，所以分为奇数和偶数两种计算方式；</li>\n<li>然后我把第一行的方块都固定下来之后，剩下的方块只需要往下平移即可固定下来了；</li>\n<li>第一个for循环表示行，第二个表示列，都是简单的数学计数知识，不过多阐述。</li>\n</ul>\n<p>对于方法fixRollSquarePosition：</p>\n<ul>\n<li>因为我们已经从初始化的操作中知道哪一个位置是空的，startEmptyPosition；</li>\n<li>而且已经把外围的方块连成了环（通过next关联），上文的linkTheOuterSquare方法；</li>\n<li>因此可以很容易确定下来旋转的方块所要开始运动的初始位置。</li>\n</ul>\n<p>②两种运动，平移 和 90度旋转</p>\n<p>这里主要讲解一下思路，使用属性动画创建两个动画，一个是平移动画，一个是旋转动画，如下图，然后使用AnimatorSet将两个连接起来，同时运行。</p>\n<p><img src=\"/2017/06/04/roll_loading/notice4.png\" alt=\"demo3\">图7（平移动画）</p>\n<p><img src=\"/2017/06/04/roll_loading/notice5.png\" alt=\"demo3\">图8（旋转动画）</p>\n<ul>\n<li>由于篇幅有限，加之方法比较长，这里不贴出，感兴趣的朋友可以去原码查看：</li>\n<li>createTranslateValueAnimator方法 和 createRollValueAnimator方法；</li>\n<li>其中值得关注的点是：需要考虑顺逆时针，以及实时更新旋转方块的旋转中心，因为平移过程中旋转中心也会跟着改变的，因此需要改变RollSquare的cx和cy，具体的逻辑就在setRollSquareRotateCenter方法中，调用的时机当然就是在动画运动的过程中啦（见onAnimationUpdate）。</li>\n</ul>\n<p>③循环起来把</p>\n<ul>\n<li>通过调用startRoll方法，会创建一次动画，当动画结束的时候（onAnimationEnd），重新调用startRoll方法，以达到循环的目的。这里相信大家都明白，就跟handler循环发送消息一样。</li>\n<li>这里有一点需要注意的就是如果动画速度调的很快，那么会导致ValueAnimator动画对象频繁重复的创建，可能会有内存抖动的风险；因此建议使用者不要将速度调的太块，不过这个控件的后期的迭代我可能将这个动画对象换成始终只有一个ValueAnimator的情况。</li>\n</ul>\n<p>④停止条件</p>\n<ul>\n<li>在动画结束准备重新调用startRoll方法之前做一个变量判断，来控制是否需要循环调用，如下：</li>\n</ul>\n<pre><code>if (mAllowRoll) {\n    startRoll();\n}\n</code></pre><ul>\n<li>当我们调用stopRoll方法的时候，mAllowRoll会变为false，调用startRoll的时候，mAllowRoll会变为true；</li>\n</ul>\n<p>⑤最后，画出来</p>\n<pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    for (int i = 0; i &lt; mFixSquares.length; i++) {\n        if (mFixSquares[i].isShow) {\n            canvas.drawRoundRect(mFixSquares[i].rectF, mFixRoundCornor, mFixRoundCornor, mPaint);\n        }\n    }\n    if (mRollSquare.isShow) {\n        canvas.rotate(mIsClockwise ? mRotateDegree : -mRotateDegree, mRollSquare.cx, mRollSquare.cy);\n        canvas.drawRoundRect(mRollSquare.rectF, mRollRoundCornor, mRollRoundCornor, mPaint);\n    }\n}\n</code></pre><p>上文也有提到，最终的绘制分为两步：</p>\n<ol>\n<li>绘制固定的方块</li>\n<li>绘制滚动的方块；</li>\n</ol>\n<p>如果读者还有不明朗的地方，欢迎查看源码，并且给我提bug，一起为这个社区做出自己的微薄贡献。</p>\n","categories":["programming"],"tags":["android","effect","custom_view","snacks"]},{"title":"我觉得我的博文标签是这样分类的","url":"http://halohoop.com/1970/01/01/tags-notes/","content":"<h4 id=\"露水-dewdrops\"><a href=\"#露水-dewdrops\" class=\"headerlink\" title=\"[露水]dewdrops\"></a>[露水]dewdrops</h4><ul>\n<li>琐事，生活体会，心灵鸡汤，更小的技巧等等…</li>\n</ul>\n<h4 id=\"饼干-cookies\"><a href=\"#饼干-cookies\" class=\"headerlink\" title=\"[饼干]cookies\"></a>[饼干]cookies</h4><ul>\n<li>小技巧，小知识点，等等…</li>\n</ul>\n<h4 id=\"点心-snacks\"><a href=\"#点心-snacks\" class=\"headerlink\" title=\"[点心]snacks\"></a>[点心]snacks</h4><ul>\n<li>再大一点的技巧，再大一点的知识点，等等…</li>\n</ul>\n<h4 id=\"大餐-meals\"><a href=\"#大餐-meals\" class=\"headerlink\" title=\"[大餐]meals\"></a>[大餐]meals</h4><ul>\n<li>需要花一些时间的东西，自定义控件，等等…</li>\n</ul>\n<h4 id=\"盛宴-feast\"><a href=\"#盛宴-feast\" class=\"headerlink\" title=\"[盛宴]feast\"></a>[盛宴]feast</h4><ul>\n<li>比较经典的东西，比如某个重要知识点的核心原码分析，等等…</li>\n</ul>\n<h4 id=\"仙丹-elixir\"><a href=\"#仙丹-elixir\" class=\"headerlink\" title=\"[仙丹]elixir\"></a>[仙丹]elixir</h4><ul>\n<li>鸿篇巨制，比如整个项目的分析，等等…</li>\n</ul>\n","categories":["notes"],"tags":["notes"]},{"title":"Hello World","url":"http://halohoop.com/1970/01/01/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":["Hexo教程"],"tags":["tuts","hexo"]},{"title":"404 Not Found：该页无法显示","url":"http://halohoop.com//404.html","content":"<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://halohoop.com\" homepagename=\"回主页\"></script>","categories":[],"tags":[]},{"title":"about","url":"http://halohoop.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://halohoop.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://halohoop.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://halohoop.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://halohoop.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://halohoop.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://halohoop.com/halohoop_custom_datas/meals-kotlin_mvp_retrofit2_rxjava2_dagger2_demo/user1.json","content":"{\"total_count\":3,\"items\":[{\"login\":\"JakeWharton\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/66577?v=3\"},{\"login\":\"daimajia\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/2503423?v=3\"},{\"login\":\"hongyangAndroid\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/10704521?v=3\"},{\"login\":\"stormzhang\",\"avatar_url\":\"https://avatars0.githubusercontent.com/u/2267900?v=3\"},{\"login\":\"Trinea\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/1169522?v=3\"},{\"login\":\"wyouflf\",\"avatar_url\":\"https://avatars2.githubusercontent.com/u/2654372?v=3\"},{\"login\":\"singwhatiwanna\",\"avatar_url\":\"https://avatars0.githubusercontent.com/u/3346272?v=3\"},{\"login\":\"greenrobot\",\"avatar_url\":\"https://avatars3.githubusercontent.com/u/242242?v=3\"},{\"login\":\"loopj\",\"avatar_url\":\"https://avatars1.githubusercontent.com/u/104009?v=3\"}]}","categories":[],"tags":[]}]