[{"title":"[饼干]安卓小秘密-不扩大view宽高增加其可触控范围","url":"http://halohoop.com/2017/06/06/cookies-android-touchdelegate/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>今天我要记录的是<strong>TouchDelegate</strong>，有很多人应该都不知道还有这个东西，知道的孩子都没你们事了，都散了散了吧，不知道的请往下看。其实也不算什么秘密，只要你仔细的走过神迹一样的事件分发的源码，很容易发现的。</p>\n<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><p>如下图，有这样一个场景，View a 需要有这么大，比如可以是一个按钮，UI要求显示View a的黑框部分，但是为了更好的用户体验，我们一般会增大其触控范围，比如点击绿框中都能够触发a的事件，咋做？（说好的不卖关子的呢？）</p>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo0.png\" alt=\"demo0\"></p>\n<h2 id=\"Don’t-do\"><a href=\"#Don’t-do\" class=\"headerlink\" title=\"Don’t do:\"></a>Don’t do:</h2><ul>\n<li>增加a的Padding?<ul>\n<li>后期如果修改bgColor，那么不好了，绿色框内全变色。</li>\n</ul>\n</li>\n<li>套多一层透明的FrameLayout？<ul>\n<li>增加布局复杂度，我TM一脚飞死你。 </li>\n</ul>\n</li>\n<li>自定义view限制绘制区域？<ul>\n<li>写完了？你很棒！但是你可以收拾包袱走人了。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-should-do-How-to-use-TouchDelegate-：\"><a href=\"#What-should-do-How-to-use-TouchDelegate-：\" class=\"headerlink\" title=\"What should do (How to use TouchDelegate)：\"></a>What should do (How to use TouchDelegate)：</h2><p>要学会站在巨人的肩膀，要知道，<strong>“你遇到的，巨人也会遇到”</strong>，巨人给我们留下了<strong>TouchDelegate</strong></p>\n<h3 id=\"直接上菜：\"><a href=\"#直接上菜：\" class=\"headerlink\" title=\"直接上菜：\"></a>直接上菜：</h3><p>注意方法ViewGroup.setTouchDelegate(Rect,View)</p>\n<p>以下代码出自我一个自定义View—<a href=\"https://github.com/halohoop/UsoppBubble/blob/master/lib/src/main/java/com/halohoop/usoppbubble/widget/UsoppBubble.java\" target=\"_blank\" rel=\"external\">UsoppBubble.java</a></p>\n<pre><code>@Override\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n    super.onLayout(changed, left, top, right, bottom);\n    if (changed) {\n        float largedSize = (bottom - top) * mTouchAreaLargerRatio;//乘以放大倍数\n        int deltaY = (int) (largedSize - (bottom - top));\n        int deltaX = largedSize &gt; (right - left) ? (int) (largedSize - (right - left)) : 0;\n        ViewGroup vg = (ViewGroup) getParent();\n        Rect rect = new Rect(left - deltaX, top - deltaY, right + deltaX, bottom + deltaY);\n        //构建出来的Rect对象就相当于绿色框框，而this就是这个view的实例。\n        vg.setTouchDelegate(new TouchDelegate(rect, this));\n    }\n}\n</code></pre><p>相信上述代码是极度容易的，ViewGroup.setTouchDelegate(Rect,View)接受两个参数：</p>\n<ul>\n<li>可触控区域。</li>\n<li>谁(哪个子view)需要用这个可触控区域。</li>\n</ul>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ul>\n<li>QQ消息气泡可触控区域</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo1.png\" alt=\"demo1\"></p>\n<ul>\n<li>当然我也模仿qq做了一个<a href=\"https://github.com/halohoop/UsoppBubble\" target=\"_blank\" rel=\"external\">自己的消息气泡版本</a></li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo2.gif\" alt=\"demo2\"></p>\n<ul>\n<li>小米贴边悬浮球点击唤醒</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo3.png\" alt=\"demo3\"></p>\n<ul>\n<li>锤子的闪念胶囊贴边点击唤醒</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo4.png\" alt=\"demo4\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>View.setTouchDelegate(Rect,View)，这句还不够吗？还要我怎样？</li>\n<li>你遇到的，巨人也会遇到，如果换位思考一下，你就是“巨人”，那么子View获取到的触摸事件是从ViewGroup分发下来的，那么如果在分发之前加一些条件判断，比如区域什么的，那么TouchDelegate这玩意儿是不是就出来了呢？</li>\n<li>Stay hungry stay foolish!</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n<hr>\n<p>确保这文章被看完了，我在上面留了一个无伤大雅的bug，不知道有人发现没有，那就是：</p>\n<p><em>setTouchDelegate其实是View的方法。而ViewGroup : View，无伤大雅。</em></p>\n","categories":["programming"],"tags":["cookies","android","view"]},{"title":"[饼干]Kotlin Trick 001-省略一些重复的工作","url":"http://halohoop.com/2017/06/05/cookies-kotlin-trick-001/","content":"<p>好的文章有时候不在于鸿篇巨制，而在于一目了然，有时候这种快餐小技巧更能帮助人，没有铺垫没有客套，直戳掌握知识的要害。所以从这篇开始会不间断的记录一些小技巧，文章已[饼干]开头的都是一篇短文。</p>\n<p>一些重复的工作，比如说我们在性能调优的时候经常用到的Trace，以下是一个实例：</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>Trace.beginSection(sectionName);\ndoSomeCalculation();\nTrace.endSection();\n</code></pre><h2 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h2><p>如果在每个地方都加入<strong>Trace.beginSection(sectionName)和Trace.endSection()</strong>会疯掉的，搞不好还忘记加Trace.endSection()。</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><pre><code>inline fun trace(sectionName: String, body: () -&gt; Unit) {\n    Trace.beginSection(sectionName)\n    try {\n        body()\n    } finally {\n        Trace.endSection()\n    }\n}\n//and use it\ntrace(&quot;foo&quot;) {\n    doSomeCalculation()\n}\n</code></pre><p>这样我们就可以把Trace.beginSection(sectionName)和Trace.endSection()省略了。<br>甚至你还可以有返回值：</p>\n<pre><code>inline fun &lt;T&gt; trace(sectionName: String, body: () -&gt; T): T {\n    Trace.beginSection(sectionName)\n    try {\n        return body()\n    } finally {\n        Trace.endSection()\n    }\n}\n\n//and use it\nval result = trace(&quot;foo&quot;) {\n    doSomeCalculation()\n}\n</code></pre><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>实际上这种方式是方法拓展，lambda带给我们的额便利，同样的技巧，相信你能应用到Trace以外更多的地方，相信你能接触到更好的用法。</strong></p>\n","categories":["programming"],"tags":["cookies","kotlin","android"]},{"title":"[小吃]小清新加载等待控件","url":"http://halohoop.com/2017/06/04/roll_loading/","content":"<p><em>本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</em></p>\n<p>控件源码：<a href=\"https://github.com/halohoop/RollSquareView\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/RollSquareView</a></p>\n<p>正文</p>\n<p>背景<br>从锤子手机上看到的效果，锤子系统更新界面的入口按钮就是这个加载动画。</p>\n<p>效果图</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo3.gif\" alt=\"demo1\"> 图1(效果图1)</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo2.gif\" alt=\"demo2\"> 图2(效果图2)</p>\n<p>使用方式</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo.png\" alt=\"demo3\"> 图3(使用说明图)</p>\n<ul>\n<li>half_rect_width:半个方块的宽度，单位dp</li>\n<li>rect_divier_width:方块之间间隔宽度，单位dp</li>\n<li>start_empty_position:初始空出的位置</li>\n<li>is_clockwise:是否顺时针旋转</li>\n<li>line_count:一行的数量，最少为3</li>\n<li>fix_round_cornor:固定的方框的圆角半径</li>\n<li>roll_round_cornor:旋转的方框的圆角半径，如果这两个圆角半径设置成不一样的值就会得到上面图1的效果，设置成一样就是图2.</li>\n<li>roll_when_show_stop_when_hide:是否自动开始自定旋转，如果设置为false，则需要手动调用startRoll()方法(下文会提到)才会开始运动，设置为true则设置View.Visibility就会自动开始旋转。</li>\n<li>square_color:方块的颜色。使用十六进制代码的形式（如：#333、#8e8e8e）</li>\n</ul>\n<p>讲解实现方法之前，首先要说明一下方格的排列方式是从左到右，从上到下，也就是如果line_count设置为3，那么方格的序号如下图：</p>\n<p><img src=\"/2017/06/04/roll_loading/notice1.png\" alt=\"demo3\"> 图4(序号排列说明)</p>\n<p>实现思路：<br>自定义控件最主要的就是如何去准备要展示给用户看的东西，东西有了之后，我们在onDraw方法里面按部就班的画出来就可以了。接下来就带大家来走一走我准备的整个过程。其实整个过程就像做菜，准备材料（准备数据），加调味料（处理初始数据），翻炒（编写逻辑），这一切都是在锅中完成的，这个锅就是我们的onDraw方法，我们把所有的一些都准备好，然后扔进锅（onDraw）里面。</p>\n<p>最终的绘制分为两步：</p>\n<ul>\n<li>绘制固定的方块</li>\n<li>绘制滚动的方块</li>\n</ul>\n<p>当运动的时候将固定的方框中的两个方块隐藏，然后让滚动的方块继承其中一个的位置，然后通过属性动画改变其位置的值以及旋转角度的值，最终调用invalidate()重绘让其动起来。</p>\n<p><img src=\"/2017/06/04/roll_loading/notice3.png\" alt=\"demo3\"> 图5(绘制原理图示)</p>\n<p>①（控件精髓就在此处）根据配置准备绘制的数据</p>\n<p>处理自定义属性：</p>\n<pre><code>private void initAttrs(Context context, AttributeSet attrs) {\n    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.RollSquareView);\n    //行列数\n    mLineCount = typedArray.getInteger(R.styleable.RollSquareView_line_count, 3);\n    //旋转的方块圆角\n    mRollRoundCornor = typedArray.getFloat(R.styleable.RollSquareView_roll_round_cornor, 10);\n    ...\n    其他属性省略，请大家看源码\n\n    //开始的空格位置\n    mStartEmptyPosition = typedArray.getInteger(R.styleable.RollSquareView_start_empty_position, 0);\n    if (isInsideTheRect(mStartEmptyPosition, mLineCount)) {\n        mStartEmptyPosition = 0;\n    }\n    //当动态滚动的时候实时更新的空格位置\n    mCurrEmptyPosition = mStartEmptyPosition;\n    typedArray.recycle();\n}\n</code></pre><p>当选择空格位置不是外围的方块序号的时候，自动选择0位置，判断是否外围一圈的算法如下，纯数学知识：</p>\n<p><img src=\"/2017/06/04/roll_loading/notice2.png\" alt=\"demo3\"> 图6(绿色框出来的就是非外围的方块)</p>\n<pre><code>private boolean isInsideTheRect(int pos, int lineCount) {\n    if (pos &lt; lineCount) {//是否第一行\n        return false;\n    } else if (pos &gt; (lineCount * lineCount - 1 - lineCount)) {//是否最后一行\n        return false;\n    } else if ((pos + 1) % lineCount == 0) {//是否右边\n        return false;\n    } else if (pos % lineCount == 0) {//是否左边\n        return false;\n    }\n    //四边都不在，那就是在内部了\n    return true;\n}\n</code></pre><p>初始化方块的方法：</p>\n<pre><code>private void initSquares(int startEmptyPosition) {\n    //创建mLineCount * mLineCount个方块\n    mFixSquares = new FixSquare[mLineCount * mLineCount];\n    for (int i = 0; i &lt; mFixSquares.length; i++) {\n        mFixSquares[i] = new FixSquare();\n        mFixSquares[i].index = i;\n        mFixSquares[i].isShow = startEmptyPosition == i ? false : true;\n        mFixSquares[i].rectF = new RectF();\n    }\n    //外圈链接起来\n    linkTheOuterSquare(mFixSquares, mIsClockwise);//下文讲解\n    //创建1个滚动方块\n    mRollSquare = new RollSquare();\n    mRollSquare.rectF = new RectF();\n    mRollSquare.isShow = false;\n}\n</code></pre><p>两种方块都使用内部类定义，代码如下：</p>\n<pre><code>private class FixSquare {\n    RectF rectF;//需要绘制的方块\n    int index;//所在的序号\n    boolean isShow;//是否需要绘制\n    FixSquare next;//指向下一个需要滚动的位置，顺时针和逆时针相反\n}\n\nprivate class RollSquare {\n    RectF rectF;//需要绘制的方块\n    int index;//所在的序号\n    boolean isShow;//是否需要绘制\n    /**\n     * 旋转中心坐标\n     */\n    float cx;//滚动的时候的旋转中心x\n    float cy;//滚动的时候的旋转中心y\n}\n</code></pre><p>我们可以看到固定的方块FixSquare中有一个next变量：</p>\n<pre><code>FixSquare next;//指向下一个需要滚动的位置，顺时针和逆时针相反\n</code></pre><p>因为我们需要将外围的一圈方块都链接起来，但是现在有一个问题就是外围的方块序号并不是按照0、1、2…排列的，因此我定义了一个next变量用于指定其下一个，这样一个接一个的就把外围连成一圈了。算法如下，可能第一次看这个方法的小伙伴需要看一小会儿，因为需要适配行数3个以上的需求，因此都是动态变化的，因此都是一些数学公式，这里篇幅有限不一一讲解，大家可以顺着注释看看规律就很容易理解了，这个方法的主要目的就是为了让每个FixSquare的“FixSquare next”都赋上值，最终将外围都连成一圈，不要忘记考虑顺逆时针isClockwise这个变量哦：</p>\n<pre><code>private void linkTheOuterSquare(FixSquare[] fixSquares, boolean isClockwise) {\n    int lineCount = (int) Math.sqrt(mFixSquares.length);\n    //连接第一行\n    for (int i = 0; i &lt; lineCount; i++) {\n        if (i % lineCount == 0) {//位于最左边\n            fixSquares[i].next = isClockwise ? fixSquares[i + lineCount] : fixSquares[i + 1];\n        } else if ((i + 1) % lineCount == 0) {//位于最右边\n            fixSquares[i].next = isClockwise ? fixSquares[i - 1] : fixSquares[i + lineCount];\n        } else {//中间\n            fixSquares[i].next = isClockwise ? fixSquares[i - 1] : fixSquares[i + 1];\n        }\n    }\n    //连接最后一行\n    for (int i = (lineCount - 1) * lineCount; i &lt; lineCount * lineCount; i++) {\n        if (i % lineCount == 0) {//位于最左边\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - lineCount];\n        } else if ((i + 1) % lineCount == 0) {//位于最右边\n            fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i - 1];\n        } else {//中间\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - 1];\n        }\n    }\n    //连接左边\n    for (int i = 1 * lineCount; i &lt;= (lineCount - 1) * lineCount; i += lineCount) {\n        if (i == (lineCount - 1) * lineCount) {//如果是左下角的一个\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - lineCount];\n            continue;\n        }\n        fixSquares[i].next = isClockwise ? fixSquares[i + lineCount] : fixSquares[i - lineCount];\n    }\n    //连接右边\n    for (int i = 2 * lineCount - 1; i &lt;= lineCount * lineCount - 1; i += lineCount) {\n        if (i == lineCount * lineCount - 1) {//如果是右下角的一个\n            fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i - 1];\n            continue;\n        }\n        fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i + lineCount];\n    }\n}\n</code></pre><p>固定方块的位置，分别使用fixFixSquarePosition和fixRollSquarePosition两个方法来固定FixSquare和RollSquare：</p>\n<pre><code>private void fixFixSquarePosition(FixSquare[] fixSquares, int cx, int cy, float dividerWidth, float halfSquareWidth) {\n    //确定第一个rect的位置\n    float squareWidth = halfSquareWidth * 2;\n    int lineCount = (int) Math.sqrt(fixSquares.length);\n    float firstRectLeft = 0;\n    float firstRectTop = 0;\n    if (lineCount % 2 == 0) {//偶数\n        int squareCountInAline = lineCount / 2;\n        int diviCountInAline = squareCountInAline - 1;\n        float firstRectLeftTopFromCenter = squareCountInAline * squareWidth\n                + diviCountInAline * dividerWidth\n                + dividerWidth / 2;\n        firstRectLeft = cx - firstRectLeftTopFromCenter;\n        firstRectTop = cy - firstRectLeftTopFromCenter;\n    } else {//奇数\n        int squareCountInAline = lineCount / 2;\n        int diviCountInAline = squareCountInAline;\n        float firstRectLeftTopFromCenter = squareCountInAline * squareWidth\n                + diviCountInAline * dividerWidth\n                + halfSquareWidth;\n        firstRectLeft = cx - firstRectLeftTopFromCenter;\n        firstRectTop = cy - firstRectLeftTopFromCenter;\n    }\n    for (int i = 0; i &lt; lineCount; i++) {//行\n        for (int j = 0; j &lt; lineCount; j++) {//列\n            if (i == 0) {\n                if (j == 0) {\n                    fixSquares[0].rectF.set(firstRectLeft, firstRectTop,\n                            firstRectLeft + squareWidth, firstRectTop + squareWidth);\n                } else {\n                    int currIndex = i * lineCount + j;\n                    fixSquares[currIndex].rectF.set(fixSquares[currIndex - 1].rectF);\n                    fixSquares[currIndex].rectF.offset(dividerWidth + squareWidth, 0);\n                }\n            } else {\n                int currIndex = i * lineCount + j;\n                fixSquares[currIndex].rectF.set(fixSquares[currIndex - lineCount].rectF);\n                fixSquares[currIndex].rectF.offset(0, dividerWidth + squareWidth);\n            }\n        }\n    }\n}\n\nprivate void fixRollSquarePosition(FixSquare[] fixSquares,\n                                   RollSquare rollSquare, int startEmptyPosition) {\n    FixSquare fixSquare = fixSquares[startEmptyPosition];\n    rollSquare.rectF.set(fixSquare.next.rectF);\n}\n</code></pre><p>对于方法fixFixSquarePosition：</p>\n<ul>\n<li>通过参数有控件的中点的x和y坐标，cx和cy，加上行数，方块的宽以及方块间隔;</li>\n<li>通过以上参数很容易就可以通过计算得出第0个方块的left和top值，分别是firstRectLeft和firstRectTop；</li>\n<li>因为行数可能是奇数也可能是偶数，所以分为奇数和偶数两种计算方式；</li>\n<li>然后我把第一行的方块都固定下来之后，剩下的方块只需要往下平移即可固定下来了；</li>\n<li>第一个for循环表示行，第二个表示列，都是简单的数学计数知识，不过多阐述。</li>\n</ul>\n<p>对于方法fixRollSquarePosition：</p>\n<ul>\n<li>因为我们已经从初始化的操作中知道哪一个位置是空的，startEmptyPosition；</li>\n<li>而且已经把外围的方块连成了环（通过next关联），上文的linkTheOuterSquare方法；</li>\n<li>因此可以很容易确定下来旋转的方块所要开始运动的初始位置。</li>\n</ul>\n<p>②两种运动，平移 和 90度旋转</p>\n<p>这里主要讲解一下思路，使用属性动画创建两个动画，一个是平移动画，一个是旋转动画，如下图，然后使用AnimatorSet将两个连接起来，同时运行。</p>\n<p><img src=\"/2017/06/04/roll_loading/notice4.png\" alt=\"demo3\">图7（平移动画）</p>\n<p><img src=\"/2017/06/04/roll_loading/notice5.png\" alt=\"demo3\">图8（旋转动画）</p>\n<ul>\n<li>由于篇幅有限，加之方法比较长，这里不贴出，感兴趣的朋友可以去原码查看：</li>\n<li>createTranslateValueAnimator方法 和 createRollValueAnimator方法；</li>\n<li>其中值得关注的点是：需要考虑顺逆时针，以及实时更新旋转方块的旋转中心，因为平移过程中旋转中心也会跟着改变的，因此需要改变RollSquare的cx和cy，具体的逻辑就在setRollSquareRotateCenter方法中，调用的时机当然就是在动画运动的过程中啦（见onAnimationUpdate）。</li>\n</ul>\n<p>③循环起来把</p>\n<ul>\n<li>通过调用startRoll方法，会创建一次动画，当动画结束的时候（onAnimationEnd），重新调用startRoll方法，以达到循环的目的。这里相信大家都明白，就跟handler循环发送消息一样。</li>\n<li>这里有一点需要注意的就是如果动画速度调的很快，那么会导致ValueAnimator动画对象频繁重复的创建，可能会有内存抖动的风险；因此建议使用者不要将速度调的太块，不过这个控件的后期的迭代我可能将这个动画对象换成始终只有一个ValueAnimator的情况。</li>\n</ul>\n<p>④停止条件</p>\n<ul>\n<li>在动画结束准备重新调用startRoll方法之前做一个变量判断，来控制是否需要循环调用，如下：</li>\n</ul>\n<pre><code>if (mAllowRoll) {\n    startRoll();\n}\n</code></pre><ul>\n<li>当我们调用stopRoll方法的时候，mAllowRoll会变为false，调用startRoll的时候，mAllowRoll会变为true；</li>\n</ul>\n<p>⑤最后，画出来</p>\n<pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    for (int i = 0; i &lt; mFixSquares.length; i++) {\n        if (mFixSquares[i].isShow) {\n            canvas.drawRoundRect(mFixSquares[i].rectF, mFixRoundCornor, mFixRoundCornor, mPaint);\n        }\n    }\n    if (mRollSquare.isShow) {\n        canvas.rotate(mIsClockwise ? mRotateDegree : -mRotateDegree, mRollSquare.cx, mRollSquare.cy);\n        canvas.drawRoundRect(mRollSquare.rectF, mRollRoundCornor, mRollRoundCornor, mPaint);\n    }\n}\n</code></pre><p>上文也有提到，最终的绘制分为两步：</p>\n<ol>\n<li>绘制固定的方块</li>\n<li>绘制滚动的方块；</li>\n</ol>\n<p>如果读者还有不明朗的地方，欢迎查看源码，并且给我提bug，一起为这个社区做出自己的微薄贡献。</p>\n","categories":["programming"],"tags":["android","custom_view","effect","snacks"]},{"title":"Hello World","url":"http://halohoop.com/1970/01/01/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":["Hexo教程"],"tags":["tuts","hexo"]},{"title":"category","url":"http://halohoop.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://halohoop.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://halohoop.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://halohoop.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://halohoop.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://halohoop.com/search/index.html","content":"","categories":[],"tags":[]}]