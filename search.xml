[{"title":"[饼干]ViewPager配套滑动回调onPageScrolled","url":"http://halohoop.com/2017/06/24/cookies-android_vp_onpagescrolled/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>ViewPager配套滑动回调ViewPager.OnPageChangeListener有三个方法：</p>\n<pre><code>void onPageScrolled(int position, float positionOffset, int positionOffsetPixels);\nvoid onPageSelected(int position);\nvoid onPageScrollStateChanged(int state);\n</code></pre><p>不用过多解释，是人都会用，但是有一个方法比较复杂，三个参数的onPageScrolled，每次使用都要打印着看看到底这三个参数到底是什么，有什么规律。</p>\n<p><strong>在这里，将这三个参数在这里做一个一目了然的阐述，以便下一次再用的时候直接上手，节省时间。</strong></p>\n<ul>\n<li>首先，这个方法是在手指滑动的时候不断会回调的，和move事件一样，参数1最复杂，我们放到最后讲。</li>\n<li>参数2：positionOffset：<ul>\n<li>取值范围是[0, 1).</li>\n<li>手指右滑（包括释放手指后的同一个趋势的运动），数值变化范围(1→0]，越来越小，最后一次回调给你一个0。</li>\n<li>手指左滑（包括释放手指后的同一个趋势的运动），数值变化范围[0→1)，越来越大，但是<strong>最后一次回调也给你一个0</strong>，也就是到0.99..之后就变回0。</li>\n</ul>\n</li>\n<li>参数3：positionOffsetPixels：<ul>\n<li>和positionOffset套路完全一样，只是数值换成了像素，要注意手指左滑最后的从最大变回0的细节.</li>\n</ul>\n</li>\n<li><p>参数1：position，有点复杂的规则：</p>\n<ul>\n<li>滑动的时候，一般可见的是两页，那么这个参数就是给你第一个可见的页面.<ul>\n<li>比如，如果当前处于第1页，前面还有第0页，后面有第2页，像这样[0,<strong>1</strong>,2…]:<ul>\n<li>手指右滑，那么position会一直给你0，最后一次回调给你0，因为滑动的时候可见的是0和1，滑动完成后可见的是0.</li>\n<li>手指左滑，那么position会一直给你1，最后一次回调给你2，因为滑动的时候可见的是1和2，滑动完成后可见的是2.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>源码中的注释还有一段描述如下：<ul>\n<li>“Page position+1 will be visible if positionOffset is nonzero”,综合上面描述，我们也能发现这个规律，也就是当可见positionOffset不为0的时候，position+1的页面是可见的，可能处于滑动（或者释放手指后的滑动）中。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Stay hungry stay foolish!</p>\n</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n","categories":["programming"],"tags":["cookies","view","android","ViewPager"]},{"title":"[点心]ViewPager动画类库原码解析","url":"http://halohoop.com/2017/06/24/snacks-vp_anima_detail/","content":"<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\"><script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <div id=\"security\"> <div class=\"input-container\"> <input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" Please enter the password to read the blog. \" /> <label for=\"pass\"> Please enter the password to read the blog. </label> <div class=\"bottom-line\"></div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> 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 </div>","categories":["programming"],"tags":["android","effect","snacks","animation","PageTransformer"]},{"title":"[露水]ViewPager动画类库","url":"http://halohoop.com/2017/06/23/dewdrops-vp_anima/","content":"<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><p>图片比较大，可能需要加载一会儿。</p>\n<p><img src=\"/2017/06/23/dewdrops-vp_anima/demo0.gif\" alt=\"demo0\"></p>\n<h1 id=\"原码解析\"><a href=\"#原码解析\" class=\"headerlink\" title=\"##原码解析##\"></a><a href=\"http://halohoop.com/2017/06/24/snacks-vp_anima_detail/\"><strong>##原码解析##</strong></a></h1>","categories":["programming"],"tags":["android","dewdrops","effect"]},{"title":"[露水]review setContentView","url":"http://halohoop.com/2017/06/22/dewdrops-setcontentview/","content":"<p>今晚重温了一下setContentView的整个流程，留下点东西，图一张。</p>\n<p><img src=\"/2017/06/22/dewdrops-setcontentview/demo0.png\" alt=\"demo0\"></p>\n","categories":["tricks"],"tags":["android","dewdrops"]},{"title":"[露水]小故事，大学问","url":"http://halohoop.com/2017/06/18/dewdrops-six_principle/","content":"<p>一个人骑着单车走了二里地，他老婆依偎在车后座，他们是去接小孩放学，小孩叫迪迪，然后扔下单车开车走了。</p>\n","categories":["tricks"],"tags":["dewdrops"]},{"title":"[饼干]ViewDragHelper.Callback.onEdgeLock是干嘛的么","url":"http://halohoop.com/2017/06/17/cookies-android_viewdraghelper_callback/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>ViewDragHelper.Callback提供给我们很多回调，灰常方便，网上很多文章都非常棒和详细，如果你还不知道ViewDragHelper这个神器怎么用，那你先去看看这些<a href=\"http://46aae4d1e2371e4aa769798941cef698.devproxy.yunshipei.com/hbl_for_android/article/details/51485827\" target=\"_blank\" rel=\"external\">文章</a>，不然下文你也看不懂。</p>\n<p>有一个回调大家都没有在意，或者说描述的含糊不清，这里要说的回调就是：</p>\n<pre><code>@Override\npublic boolean onEdgeLock(int edgeFlags) {\n    return false;\n}\n</code></pre><p>默认是返回false，从方法字面上去理解，那就是边缘锁定，我试着判断一个边缘然后返回true看看，是否边缘拖拽就失效了呢，代码如下：</p>\n<pre><code>@Override\npublic boolean onEdgeLock(int edgeFlags) {\n    return (edgeFlags&amp;ViewDragHelper.EDGE_LEFT)==ViewDragHelper.EDGE_LEFT;\n}\n</code></pre><p>显然结果和我预料的并不一样，难道这个方法是要手动调用的咩？这个时候咋办呢，当然是看源码，记住，一切答案都在源码。</p>\n<p><img src=\"/2017/06/17/cookies-android_viewdraghelper_callback/demo0.png\" alt=\"demo0\"></p>\n<p>注意1278行，源码中确实调用了onEdgeLock，为什么没有跑到这句，这里有些线索，比如：</p>\n<ul>\n<li>absDelta &lt; absODelta * 0.5f，绝对值后新旧数据的比较</li>\n</ul>\n<p>但是线索还不够，那就往上爬，找到checkNewEdgeDrag方法被调用的地方。当是LEFT和RIGHT的时候传入的是dx和dy，而TOP和BOTTOM的时候传入的是dy和dx，dx和dy调换了位置，恍然大悟了。</p>\n<p><img src=\"/2017/06/17/cookies-android_viewdraghelper_callback/demo1.png\" alt=\"demo1\"></p>\n<p>不多说，我把代码直接翻译成中文：</p>\n<ul>\n<li>当想要锁住的是<strong>左</strong>或者<strong>右</strong>的时候，如果<strong>左右</strong>滑动的距离还没<strong>上下</strong>滑动的距离的一半多，那就走回调onEdgeLock()；</li>\n<li>当想要锁住的是<strong>上</strong>或者<strong>下</strong>的时候，如果<strong>上下</strong>滑动的距离还没<strong>左右</strong>滑动的距离的一半多，那就走回调onEdgeLock()；</li>\n</ul>\n<p>当我们开启了边缘锁定模式，像这样：</p>\n<pre><code>viewDragHelper.setEdgeTrackingEnabled(ViewDragHelper.EDGE_LEFT);//这里锁定左边\n</code></pre><p>之后，我们在左边缘<strong>上下</strong>滑动的时候，就能够走回调onEdgeLock方法了。</p>\n<p>看看红框框出来的部分，</p>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ul>\n<li><p>微信边滑退出，识别是边滑的时候锁定只能是左右滑，而不能是上下滑。</p>\n<ul>\n<li>当然我们可以自己在别的ViewDragHelper.Callback的回调中做限制,比如clampViewPositionHorizontal和clampViewPositionVertical，但是，神经病啊，用原生的不用你写那么多的判断逻辑啊。</li>\n</ul>\n</li>\n<li><p>我写的Demo在这里，请享用：</p>\n<ul>\n<li><a href=\"https://github.com/halohoop/AndroidDigIn/blob/c4d530b5943ab79e7dd6dc3dbbff1f6a76e214be/app/src/main/java/com/halohoop/androiddigin/widgets/DragViewGroup.java\" target=\"_blank\" rel=\"external\">DragViewGroup.java</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>答案都在源码.</li>\n<li>Stay hungry stay foolish!</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n","categories":["programming"],"tags":["cookies","view","android","ViewDragHelper"]},{"title":"[饼干]FragmentManager的popBackStack的使用","url":"http://halohoop.com/2017/06/16/cookies-frag_manager_popstack/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><ul>\n<li><p>用法：</p>\n<pre><code>//自己以上所有，不包括自己\ngetSupportFragmentManager().popBackStack(&quot;rt&quot;, 0);\n//自己以上所有，包括自己\ngetSupportFragmentManager().popBackStack(&quot;rt&quot;, 1);\n//最上层的一个\ngetSupportFragmentManager().popBackStack(null, 0);\n//最上层的一个\ngetSupportFragmentManager().popBackStack();\n//全部pop\ngetSupportFragmentManager().popBackStack(null, 1);\n</code></pre></li>\n<li><p>注意：</p>\n<ul>\n<li>popBackStack传入的第一个参数是addToBackStack(name)传入的参数，而不是Fragment的Tag；</li>\n<li>如果遇到两个name相同的连在一起的时候，两个移除，三个相同的就三个都移除…示例代码：<ul>\n<li>getFragmentManager().popBackStack(“rt”, 1); <ul>\n<li>也就是说，查找栈的顺序是先从后入栈的开始查找往下找，找到一个之后还继续找下一个如果还是一样的name就再找一个直到不是为止，然后将是的一并pop出栈。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实例代码Demo\"><a href=\"#实例代码Demo\" class=\"headerlink\" title=\"实例代码Demo\"></a>实例代码Demo</h2><p><a href=\"https://github.com/halohoop/AndroidDigIn#20fragmentmanager的popbackstack的使用\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/AndroidDigIn</a></p>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n<ul>\n<li>Stay hungry stay foolish!</li>\n</ul>\n","categories":["programming"],"tags":["cookies","android","Fragment"]},{"title":"[露水]adb无线调试","url":"http://halohoop.com/2017/06/15/dewdrops-adb_wifi/","content":"<p>条件：</p>\n<ul>\n<li>一台开发版手机</li>\n<li>两个命令：<ul>\n<li>adb tcpip 55555</li>\n<li>adb yourDevicesIp:55555</li>\n</ul>\n</li>\n</ul>\n<p>比如：</p>\n<pre><code>[win cmd]\nD:\\workspaces\\androidstudio\\project&gt;adb tcpip 55555\nD:\\workspaces\\androidstudio\\project&gt;adb connect 192.168.199.156:55555\nconnected to 192.168.199.156:55555\n</code></pre><p><strong>无线调试还支持 instant run 和 Debug 咧。</strong></p>\n<p><a href=\"https://developer.android.com/studio/command-line/adb.html#wireless\" target=\"_blank\" rel=\"external\">参考</a></p>\n","categories":["tricks"],"tags":["dewdrops"]},{"title":"[饼干]Kotlin Trick 003-滚吧工具类","url":"http://halohoop.com/2017/06/14/cookies-kotlin-trick-003/","content":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>class Utils {\n    public static char getLastChar(String str){\n        return str.charAt(s.length()-1);\n    }\n}\n</code></pre><p>调用:</p>\n<pre><code>char c = Utils.getLastChar(&quot;halohoop.com&quot;);//得到m\n</code></pre><h2 id=\"Annoying：\"><a href=\"#Annoying：\" class=\"headerlink\" title=\"Annoying：\"></a>Annoying：</h2><p>增加类</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><p>不需要增加额外的类。</p>\n<pre><code>//扩展属性\ninline val String.lastC: Char\n    get() = get(length - 1)\n</code></pre><p>或者：</p>\n<pre><code>//扩展方法\ninline fun String.getLastChar() : Char{\n    return get(length-1)\n}\n</code></pre><p>调用:</p>\n<pre><code>var c = &quot;halohoop.com&quot;.lastC//得到m\n</code></pre><p>或者</p>\n<pre><code>var c = &quot;halohoop.com&quot;.getLastChar()//得到m\n</code></pre>","categories":["programming"],"tags":["cookies","android","kotlin"]},{"title":"[饼干]Kotlin Trick 002-滚吧重载方法","url":"http://halohoop.com/2017/06/13/cookies-kotlin-trick-002/","content":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>void test(int i){\n}\nvoid test(String j){\n}\nvoid test(int i, String j){\n}\n</code></pre><p>调用:</p>\n<pre><code>test(1);\ntest(&quot;aaa&quot;);\ntest(1,&quot;aaa&quot;);\n</code></pre><h2 id=\"Annoying：\"><a href=\"#Annoying：\" class=\"headerlink\" title=\"Annoying：\"></a>Annoying：</h2><p>写太多重载了，眼都花了</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><pre><code>//一个足矣\nfun test(i:int = 0, j:String = &quot;&quot;){\n}\n</code></pre><p>调用:</p>\n<pre><code>test();//有默认值，可以不用传\ntest(1);\ntest(1,&quot;aaa&quot;);\ntest(j = &quot;aaa&quot;);//非第一个需要传递参数名字，这也能增加可读性\n</code></pre>","categories":["programming"],"tags":["cookies","android","kotlin"]},{"title":"[大餐]加快gradle构建速度","url":"http://halohoop.com/2017/06/13/meals-speedup_gradle_build/","content":"<p><em>本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</em></p>\n<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>AS中gradle构建一般可以分为三种，</p>\n<p>1.从0开始构建，Full Build；</p>\n<p>2.修改源代码后构建，之前构建过，Incremental build java change；</p>\n<p>3.修改资源文件后构建，之前构建过，Incremental build resource change。</p>\n<p>从这三方面其实都可以有切入点来进行提速，gradle插件3.0做了大改，优化了很多东西，包括gradle依赖系统以及缓存系统，这些都是直接影响构建速度的因素，整理了有10+个小技巧可以加快我们的构建速度，下面请听我一一道来。</p>\n<h2 id=\"正餐：\"><a href=\"#正餐：\" class=\"headerlink\" title=\"正餐：\"></a>正餐：</h2><h3 id=\"技巧1：使用最新版本的gradle插件\"><a href=\"#技巧1：使用最新版本的gradle插件\" class=\"headerlink\" title=\"技巧1：使用最新版本的gradle插件\"></a>技巧1：使用最新版本的gradle插件</h3><pre><code>buildscript {\n    repositories {\n        maven { url &apos;https://maven.google.com&apos; }\n        jcenter()\n    }\n    dependencies {\n        classpath &apos;com.android.tools.build:gradle:3.0.0-alpha1&apos;\n    }\n    ...\n}\n</code></pre><p>看到google.com之后，相信你应该知道要拿个“梯子”的，所以我说升级as最方便嘛，而现在gradle的版本已经更新到alpha1+了(现在是2017年06月12日)，根据谷歌官方只要是3.0+，也就是以2017I/O大会的版本开始就可以。</p>\n<h3 id=\"技巧2：避免使用legacy-multidex\"><a href=\"#技巧2：避免使用legacy-multidex\" class=\"headerlink\" title=\"技巧2：避免使用legacy multidex\"></a>技巧2：避免使用legacy multidex</h3><p>当app方法数量超过64k的时候就会编译失败，早期版本的构建系统按如下方式报告这一错误：</p>\n<pre><code>Conversion to Dalvik format failed:\nUnable to execute dex: method ID not in [0, 0xffff]: 65536\n</code></pre><p>较新版本的 Android 构建系统虽然显示的错误不同，但指示的是同一问题：</p>\n<pre><code>trouble writing output:\nToo many field references: 131000; max is 65536.\nYou may try using --multi-dex option.\n</code></pre><p>使用multidex分包处理是谷歌官方给我们提供的解决方案，由于分包被内置支持在5.0以及之后，当我们需要兼容的版本跨越5.0也就是api21的时候，比如说14–23，那么我们需要使用兼容库：</p>\n<pre><code>com.android.support:multidex:1.0.0\n</code></pre><p>使用兼容库能让我们的低版本的也进行分包处理，<a href=\"https://developer.android.com/studio/build/multidex.html#about\" target=\"_blank\" rel=\"external\">具体如何操作gradle需要配置什么Application需要如何设置</a>等不是本文重点，请各位自行谷歌、百度。</p>\n<p>根据谷歌官方描述，使用兼容库会明显拖慢构建，也就是如果你的调试机器版本低于5.0，又进行了分包处理，那么当你点击那个绿色构建按钮▶或者使用命令行gradlew构建的时候，那你可以先去吃一顿饭先了（Just kidding!）。</p>\n<p>所以我们在开发调试的时候尽量使用高版本的手机5.0+，等功能完成了，后面做兼容低版本的时候再使用低版本的手机进行调试。可能有人会说，我在开发功能的时候如果不实时调试低版本的兼容问题后期可能有问题，关于这一点，我想说的是一点是经验问题，经验足的人就是能够知道你这段代码写出来可能的结果，这是内功，不可言状，却又确实存在的能力，我见过这样的人，你没写出来他就能够知道运行的结果，另一点是我们需要相信google的兼容团队给我们的兼容方案是能够解决绝大部分的兼容问题的，我指的兼容方案是指使用appcompat、support等之类的兼容库。</p>\n<h3 id=\"技巧3：关闭multi-apk\"><a href=\"#技巧3：关闭multi-apk\" class=\"headerlink\" title=\"技巧3：关闭multi apk\"></a>技巧3：关闭multi apk</h3><p>如果你的项目需要编译出多个density或者多个abi（CPU架构）的APK，那么这也是开发构建的时候不需要做的操作，因为在你手上调试的机器只是一种density一种abi，因此我们在构建的时候可以将<a href=\"https://developer.android.com/studio/build/configure-apk-splits.html\" target=\"_blank\" rel=\"external\">multi-apk</a>的构建给去除。可以进行如下配置：</p>\n<pre><code>splits {\n    density {\n        //enable true\n        enable false\n        ...\n    }\n    abi {\n        //enable true\n        enable false\n        ...\n    }\n}\n</code></pre><p>但是显然这趟配置影响全局配置，后期还可能忘记改回来，更灵活一点的方式可以这样：</p>\n<pre><code>android {\n    ...\n    splits {\n        ...\n    ｝\n    if(project.hasProperty(&apos;HaloDevBuild&apos;)){\n        splits.abi.enable = false;\n        splits.density.enable = false;\n    }\n    ...\n}\n</code></pre><p>或者，可以更加细致一点：</p>\n<pre><code>android {\n    ...\n    splits {\n        ...\n    ｝\n    if(project.hasProperty(&apos;HaloDevBuild&apos;)){\n        splits.density.enable = false\n        splits.abi {\n            enable true\n            reset()\n            include &apos;arm64-v8a&apos; //select ABIs to build APKs for\n            universalApk false //whether generate an additional APK that contains all the ABIs\n        }\n        aaptOptions.cruncherEnabled = false\n    }\n    ...\n}\n</code></pre><p>注意project没有s，不是projects。<strong>并且这个判断的代码必须置于splits块的下面，否则就可能设置完之后就又被覆盖回来了</strong><br>“HaloDevBuild”属性的字符串我们可以自定义，在gradle写好这个判断之后，我们就可以在命令行编译了，命令如下：</p>\n<pre><code>./gradlew 项目名:变体 -PHaloDevBuild\n</code></pre><p>比如：</p>\n<pre><code>gradlew app:assembleDevelopmentDebug -PHaloDevBuild\n</code></pre><p>又或者可以构建顺带安装了：</p>\n<pre><code>gradlew demo:installdevelopmentDebug -PHaloDevBuild\n</code></pre><p>-P之后表示要传递的属性。当然我们如果需要在as中点击绿色构建按钮▶编译，那就要设置一下每次都要传入属性：</p>\n<p><img src=\"/2017/06/13/meals-speedup_gradle_build/demo0.png\" alt=\"demo0\"></p>\n<p>另外，我们可以这样获取Android手机CPU/ABI型号：</p>\n<pre><code>String CPU_ABI = android.os.Build.CPU_ABI;//过时了\nString CPU_ABIs[] = android.os.Build.SUPPORTED_ABIS;\n</code></pre><h3 id=\"技巧4：使用最少的资源打包\"><a href=\"#技巧4：使用最少的资源打包\" class=\"headerlink\" title=\"技巧4：使用最少的资源打包\"></a>技巧4：使用最少的资源打包</h3><p>和上面的思路一样，我们开发调试的时候只需要用到一种语言和一套资源文件。所以我们打包的时候不需要将所有的东西都放到这个调试的apk中。我们可以采用<a href=\"https://developer.android.com/studio/build/build-variants.html\" target=\"_blank\" rel=\"external\">定义变体</a>的方式来完成，注意下面的resConfigs属性指定了要保留的素材资源文件和语言资源文件。</p>\n<pre><code>android {\n    ...\n    flavorDimensions &quot;dev&quot;\n    productFlavors {\n        development {\n            dimension &quot;dev&quot;\n            resConfigs &quot;en&quot;, &quot;xxhdpi&quot;\n            ...\n        }\n    }\n}\n</code></pre><h3 id=\"技巧5-关闭aapt对png的优化\"><a href=\"#技巧5-关闭aapt对png的优化\" class=\"headerlink\" title=\"技巧5:关闭aapt对png的优化\"></a>技巧5:关闭aapt对png的优化</h3><p>aapt打包时候对资源图片的处理也会耗时，这里主要针对PNG，我们可以暂时关闭这种处理，还是用到上面的技巧，gradle配置如下：</p>\n<pre><code>android {\n    ...\n    if(projects.hasProperty(&apos;HaloDevBuild&apos;)){\n        splits.abi.enable = false;\n        splits.density.enable = false;\n        aaptOptions.cruncherEnabled = false\n    }\n    ...\n}\n</code></pre><p>当然如果我们将PNG转为webP也可以是一种优化方案。as2.3+支持直接转换，右键直接png图片选则convert to webP。当然webP是有版本要求的，所以请注意其用法，非本文重点自行百度了解。</p>\n<h3 id=\"技巧6：使用instant-run\"><a href=\"#技巧6：使用instant-run\" class=\"headerlink\" title=\"技巧6：使用instant run\"></a>技巧6：使用instant run</h3><p>多使用instant run，根据谷歌的描述，as3.0和2.0的instant run有巨大的差别，做了很多的优化，instant run要求调试的机器必须要在api21或者以上，而不是你的项目最小版本要在21或者以上。还有一点就是使用instant run的时候，如果我们首次构建是从0开始的，那么会比不使用instant run慢一点，因为需要为后面的instant run的冷热交换去准备一些额外的东西，然而如果后面一直都使用instant run，那么首次构建的延缓的时间就能很快被挽回来。</p>\n<h3 id=\"技巧7：避免写一些不必要的更改\"><a href=\"#技巧7：避免写一些不必要的更改\" class=\"headerlink\" title=\"技巧7：避免写一些不必要的更改\"></a>技巧7：避免写一些不必要的更改</h3><p>有些开发者为了方便会直接使用时间戳来作为每次构建的版本号（或者是自己的一套计算算法），像这样：</p>\n<pre><code>def buildDataTime = new Date().format(&apos;yyMMddHHmm&apos;).toInteger()\nandroid {\n    ...\n    defaultConfig {\n        versionCode buildDateTime\n        ...\n    }\n}\n</code></pre><p>这个一定程度上方便了我们，但是对于gradle构建系统来说，这不是好事。由于每次版本号都有修改，这就直接导致清单文件Manifest的更改。而清单文件的修改势必会趋势构建系统重新审视整个项目情况，这会增加很多额外的时间，这在开发调试的时候根本没有必要。</p>\n<p>还是利用上面的技巧，我们可以这样：</p>\n<pre><code>def buildDataTime = project.hasProperty(&apos;HaloDevBuild&apos;)? 100 : new Date().format(&apos;yyMMddHHmm&apos;).toInteger()\nandroid {\n    ...\n    defaultConfig {\n        versionCode buildDateTime\n        ...\n    }\n}\n</code></pre><h3 id=\"技巧8：类库不要使用动态的版本\"><a href=\"#技巧8：类库不要使用动态的版本\" class=\"headerlink\" title=\"技巧8：类库不要使用动态的版本\"></a>技巧8：类库不要使用动态的版本</h3><p>项目中可能会这样配置：</p>\n<pre><code>dependencies {\n    ...\n    compile &apos;com.android.support:appcompat-v7:+&apos;\n}\n</code></pre><p>这个加号+，导致gradle每次构建都要检查新的版本。即使你希望每次都用最新但是还是不好，因为库可能已经有很大的变化了，但是你是基于旧版开发的，所以为了安全不要这样设置。其实这和我们coding还是一样的道理，我们码代码的时候肯定会考虑如何能让别人的修改不影响到我们自己的，因此这个加号使不得，使不得。</p>\n<h3 id=\"技巧9：查看jvm使用的内存是否合适\"><a href=\"#技巧9：查看jvm使用的内存是否合适\" class=\"headerlink\" title=\"技巧9：查看jvm使用的内存是否合适\"></a>技巧9：查看jvm使用的内存是否合适</h3><p><img src=\"/2017/06/13/meals-speedup_gradle_build/demo1.png\" alt=\"demo1\"></p>\n<p>我一般设置为2g，这个根据项目的不同可能会有不同效果，所以可以试着稍微调整一下。</p>\n<h3 id=\"技巧10：打开gradle新的缓存机制\"><a href=\"#技巧10：打开gradle新的缓存机制\" class=\"headerlink\" title=\"技巧10：打开gradle新的缓存机制\"></a>技巧10：打开gradle新的缓存机制</h3><p>我们可以通过一个设置使用这种新的缓存机制，如下：</p>\n<pre><code>//在gradle.properties中+一行\norg.gradle.caching=true\n</code></pre><p>文章开头也提到过，Gradle 3.5（现在20170612的gradle版本已经4.0了）新的机制，可以缓存所有任务的输出。这个和as2.3时候介绍的build 缓存不一样，build 缓存只缓存预dex的外部libs。而任何时候的构建缓存其实都是可复用的，比如切换分支之后，还可以用其他分支时候的构建缓存。</p>\n<p>当然，根据谷歌官方描述，这个设置的背后还有很多需要完善的地方，使用的同时，我们可以有更多后期优化的期待。</p>\n<h3 id=\"技巧11：使用新的依赖机制\"><a href=\"#技巧11：使用新的依赖机制\" class=\"headerlink\" title=\"技巧11：使用新的依赖机制\"></a>技巧11：使用新的依赖机制</h3><p>按照官方的描述，gradle3.0之前，构建系统的依赖关系被认为是一种完全错误的方式，举一个例子：</p>\n<p>app依赖了库libX，库libX又依赖库libY。</p>\n<p>app：</p>\n<pre><code>compile &apos;libX&apos;\n</code></pre><p>libX：</p>\n<pre><code>compile &apos;libY&apos;\n</code></pre><p>如果在app中调用了libY的方法，这个时候如果libY中的方法做了改变，那么由于libY被和libX和app都有依赖被依赖关系，这时候如果构建libY势必会导致libX和app也重新构建。</p>\n<p>这应该是个完全错误的依赖方式，正确的方式应该是既然app只依赖了libX那就不应该知道libY中的api，然而这在构建系统3.0（gradle插件）之前都是这样存在的，因此3.0做了改变，引入了新的依赖形式，api和implementation来替换compile。</p>\n<ul>\n<li>implementation：表示我依赖你，但是你的api不会被我重新分享出去了。</li>\n<li>api：表示我依赖你，但是你的api会被我重新分享出去了。</li>\n</ul>\n<p>那么在看上面的例子就变成了：</p>\n<p>app：</p>\n<pre><code>implementation &apos;libX&apos;\n</code></pre><p>libX：</p>\n<pre><code>api &apos;libY&apos;\n</code></pre><p>由于存在之前的这种依赖传递的错误机制，因此我们项目中很可能就出现了这种依赖传递之后导致一个小修改就把所有库都构建一遍的情况，因此我们花一些时间将一些库的compile都替换成api和impementation对我们是有好处的，一来有效缩短构建时间，而来真正搞清楚项目中依赖的情况，那些api需要依赖传递，哪些不需要。</p>\n<p>当然我们还是可以继续使用compile，不过这种方式已经是过时的了，我们只要更新了最新插件，那么新建了项目就会发现所有的compile都会被换成了implementation。相关的修改还有androidTestImplementation和testImplementation，对应的是原来的androidTestCompile和testCompile。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><p>根据上述技巧，我写了一个小demo：</p>\n<p><a href=\"https://github.com/halohoop/SpeedUpGradleBuild2\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/SpeedUpGradleBuild2</a></p>\n<ul>\n<li>Stay hungry stay foolish!</li>\n</ul>\n","categories":["programming"],"tags":["android","meals","gradle","构建"]},{"title":"[大餐]开发摘记1--我的Fragment通信的框架","url":"http://halohoop.com/2017/06/09/meals-android-fishing/","content":"<p>如果把通信比作钓鱼，如果每次都有鱼上钩，那么我想可以分为以下四种：</p>\n<ul>\n<li>1.鱼钩上<strong>不钩</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线断了，连线带钩和鱼都没了。</li>\n<li>2.鱼钩上<strong>钩上</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线断了，连线带钩和鱼带饵料都没了。</li>\n<li>3.鱼钩上<strong>不钩</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线<strong>没断</strong>，连线带钩和鱼带饵料都<strong>拉回来</strong>了。</li>\n<li>4.鱼钩上<strong>钩上</strong>饵料，然后抛出去，钩到鱼了，这时候鱼线<strong>没断</strong>，连线带钩和鱼带饵料都<strong>拉回来</strong>了。</li>\n</ul>\n<p>其实这四种就可以对应着四种不同的通信：</p>\n<ul>\n<li>1.A向发了一个<strong>空的通知</strong>让B响应了，A不需要知道B是否响应(鱼线断了)。</li>\n<li>2.A向发了一个<strong>携带参数的通知</strong>让B响应了，A不需要知道B是否响应(鱼线断了)。</li>\n<li>3.A向发了一个<strong>空的通知</strong>让B响应了，A需要知道B是否响应，最终A得到了B响应结果(鱼线完好，成功回收)。</li>\n<li>4.A向发了一个<strong>携带参数的通知</strong>让B响应了，A需要知道B是否响应，最终A得到了B响应结果(鱼线完好，成功回收)。</li>\n</ul>\n<p>再说的简单一点，那就是：</p>\n<ul>\n<li>1.调用“void func()”方法，无参无返回值。</li>\n<li>2.调用“void func(P p)”方法，有参无返回值。</li>\n<li>3.调用“R func()”方法，无参有返回值。</li>\n<li>4.调用“R func(P p)”方法，有参有返回值。</li>\n</ul>\n<p>因为通信无非就是这四种方法，那么就可以抽象出来的这四类方法的类，如果使用四个容器装着，在合适的时候往里添加，并且在合适的时候取出来调用，那么势必可以变成一个解耦通信框架。</p>\n<p>后面会陆续记录开发这个小框架的心路历程。</p>\n<hr>\n<p><img src=\"/2017/06/09/meals-android-fishing/demo0.png\" alt=\"\"></p>\n<p>项目地址：</p>\n<p><a href=\"https://github.com/halohoop/Fishing\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/Fishing</a></p>\n<p>已经可以正常使用了。</p>\n","categories":["programming"],"tags":["view","android","meals","开发摘记"]},{"title":"[露水]你知道卫语句不","url":"http://halohoop.com/2017/06/08/dewdrops-weiyuju/","content":"<h3 id=\"卫语句\"><a href=\"#卫语句\" class=\"headerlink\" title=\"卫语句\"></a>卫语句</h3><p>在<a href=\"http://halohoop.com/2017/06/08/dewdrops-weiyuju/《阿里巴巴Java开发手册》.pdf\">《阿里巴巴Java开发手册》.pdf</a>中的15页有提到“卫语句”，如下图。</p>\n<p><img src=\"/2017/06/08/dewdrops-weiyuju/demo0.png\" alt=\"demo0\"></p>\n<p>说的是：</p>\n<h3 id=\"我们不要这样写：\"><a href=\"#我们不要这样写：\" class=\"headerlink\" title=\"我们不要这样写：\"></a>我们不要这样写：</h3><pre><code>if(){\n\n}else if(){\n\n}else if(){\n\n}...\n</code></pre><h3 id=\"而要这样写\"><a href=\"#而要这样写\" class=\"headerlink\" title=\"而要这样写\"></a>而要这样写</h3><pre><code>if(){\n    return;\n}\nif(){\n    return;\n}\nif(){\n    return;\n}\n</code></pre><p>虽然不是很明白更深层的原因，但是我表示对后面那一句“或者状态模式来实现”很有感触，因为正在做的一个小框架就打算使用状态模式来摒弃一堆的if-else判断。</p>\n","categories":["programming"],"tags":["dewdrops"]},{"title":"[露水]客观，有时候需要精分","url":"http://halohoop.com/2017/06/08/dewdrops-be_objective/","content":"<link href=\"/style.css\" rel=\"stylesheet\" type=\"text/css\"><script src=\"/crypto-js.js\"></script><script src=\"/mcommon.js\"></script><script src=\"//cdn.bootcss.com/jquery/1.11.3/jquery.min.js\"></script> <div id=\"security\"> <div class=\"input-container\"> <input type=\"password\" class=\"form-control\" id=\"pass\" placeholder=\" Please enter the password to read the blog. \" /> <label for=\"pass\"> Please enter the password to read the blog. </label> <div class=\"bottom-line\"></div> </div> </div> <div id=\"encrypt-blog\" style=\"display:none\"> U2FsdGVkX1/TMU5dm+9oomh0KZNbAeJ9Bc7ZmYux77pg7H4jwdqElhjtxe4KmcopFKGLrqZIat/Rg4Pnx1k9C+cBy2XEULwo3oSHg0z2wroJ5SzNUNRPRdJwlx0mOs7psEOaifJhgcdrHfveBnrWZucI6WH7lagrGdLSonjqGznBCTkt8tXspOVwk0Ob+jJD/zVYwpaijok2fWd1FfdfvnOybzUUCG0yRcFMqWL33VQXBBNl2e5oj1fF8a6uWN7BJg5m/T+E0tjBRNWLObJBWChRk9iawKMlhT1bK8Zd9y616S+ggu6nMpVsXsHQrsPQ5ppHhddOifd9Z+7X7ngfQo+z2n/YxixED+zqopy/cqDj664qkYp6oU+yHjNAfFKc5Pv6mM1cWBiuFRwy8A2ylkPGTGQgRYCRrnPPpPyDnIM9Z3q8Pv1wpaXtNCISWiOFcRfyXoXAEG6sF8PbyC+T6JoNXsV3bMzPi2OgrFyz6c7r9NtpnjUJVFWJj6ePXHpaVXABXKfG9KiUR6grnTLtDO3zxL/Lc9MeT/qhIgL2NBD7rkqAV5OYtkZNFlOtuIOVmhXjbsO/xFUbbuJyXcS7PQuAyJCGfiVdzogc1h6OborIMMJcLh9fwIN3NU6NyeGiaUlhCud8T7mv1bDRH4fHNAwa5wNs6KC8wmt+qReicu+c0aaLgyWIIsF23wL7qH8ssN/J416fn+DKOl4A7haAW6rLjyc/zeWwqItCqep/vUurR6lBhTdIM4B0ALGU1xdSwl7j8BoCzysIEf8GZt7Qzh+/MQGD2FGS3/N4Sae13lHBWOVaV7SMQOiDaKuVDqFz56lStE0fJwaoH174vLXKbbmt87tYWTqgn9Gh5veXb+tb6rlC0cZB9FRGApWDsR+bPUdAgCUyTOz3XX/L6WFt9uQZ2j7lMo8lYn+IkxyZjCZq59TJvVEpptoLDsLpfeubcMVZ/c5oYZoyqW8+LUTfTn9+jY+F7tqPNLN/CJEYHO2kHuud5Xy4fa2KH9AH0YOrvqRsXCSFH5n7k4LUSa4JuYCAJRGxOVWknA+s4ESu5oZlAWrukYSpcDzkRv0TZmeV4iquKrpJT916fIoWRPeIkvImrJCK4MjSkEHgov9ZxaY70bhWOL0idk+OpBNK+AngmAhPzA0FhdXKDJIZLwStWyIsZbK4HAhIB6CFPh6QOmaN9Bz4FtIf4e1LN3IsRAzwMDZ7eEfixyBvG7HKhtbAMHOCn+t/Xpe3PMal5MPhHp2nsag4BJ+Q6fkvG3IHUCn03hwUlldNCpTAAn0vKIOiWh9TphVffIJhfrimVooMh/NXHSxUS+Jq0Q0OuA7Ja62p6KMJuASWzqhD8VR9ZcuXb6fn+AwG2tAC9N/6vR5ayrwALju6m8Zk+sJel7WnN2qhgdG86BY4qcdSBvX+tDrf1sv6unlsIwpihnxUMKj79oqD1n9rJvlYblbUSu00gOXjyg1hJXQ7DTg12E1Qfxr1Y2fCdGFeLM+rbbMb1EyypJaqMgXlhyWCe3uCSZhPsGdqRVUFX2pnt168EYr8OsUXN/kN2gRqiPHApBvWwtI69bMyuz/i8GNd2nseP3h1hIOvNFulSvN8ru+iEDfN7Hu2vk34Kwv3R+h9L/0zN+chAAlXKfXustYS9bKzrPdTJ7NmqJphnWvnMQkBHP2QogIrf6TSsL/sp3AWvaJQWfdTYKlOZHzCfoq8I6K2gn0+fELsjAK3TOb1JfA18z6CdsNrmxhvFcv8mMaKIuAs0o/4jZg0guKOj+Fnq8UvqPowi7uzvmIOKFFzTjV3rPjpxJKLeJAJP6sppCNrxyDOvh6w/S/fIsUCwkHg7JGZoHZPMLViNzh7esaDCW/NoDtCJdkHvvq3uaywfNwXWM/IcGkmFVi4/y3wyos40OqMJLFYCIJ6JbbVk2EKxogxmHKsb8Guv+0o1VGtLLUr8pA4UTJFmGcz2jUnFH7a6kscM/jGYz1TZehGXUuGxZNODY+Sn9sxuhnP6cMCsPdugaWF811+Z9Ke9ya2/eqFAnES3/ATTcx5tuGZhI/kLDisB9HMSxx/iAsun/N65S4WCffk1LuWZbkcuIbjyfZmdKJb9NEgzTLpPfHobqaf1Khg4CUH4rFJEQibBuogkEQZw4zcx/h2uL8oDzvz3ZiJiaFMK87jAGtS+ftlR34LpuH6oXHTbv729DEk1suuQXhZWyJotXVWM4MVAFaXrwoa/7BsrUbQ/Q9CyVK9A42c4BoN7l8GDlq2EdR/bt3xugQdZsZcsPsAnUXNT6Rr8DEOJp4N9nz9pyq3viUvR508kjBzJaaQrmrGxuixeW5N3hb0JoHFuyM2Y/vWTlQu51sc7KOLYEVXoHZZP949L63k6DTv23PrKYNoWtxEERYr7Xi0PH0dDRr3pCa8xt0VfuNg51NLvq98VgZGjhBy4qbfaKQzmAxqFb4ZSItp5MTRYmBU2MKtvNe/L1g2TO/NzLK1bLNVY6uPqTiH/bVMsoeycFJm+vS1NA54JpbTWX0MjoQf35lAsoWmiKxnFcG01oXMn4pqttLTwxUcJ5B+RwRl4xwHAhcvKB+ecP2MXx6LUEqgPKmONz+MDnP+OeKBITM9y0AinAZHitEKPgCYi8cPkb63rhgsjMLkiCh6ILo7Udw67qRg8tywi3kip0VrYH+yk1ylTjEzS2apgQDT+X1tPfkm0ZVRPu9wjTlg+7O82EdE0WIIfAttgiBJ9V3zvqDd7NzzLP9u4OEnhvMY5OzTQO+GGCaZ2QIx5qRyxC9arBfMoGsbEUC2+At9JXVqyGshZY01lhcQSUEnNkb9d0uNOr5RRwLqX+myNKVpuEzHDUIIBcZBE8tbFs/f5afmVNJJ8fBmObGc02otSW01ouj2vHiET3qocqLmyuOsZRENsKosLc0V5mEwRFnwVB912uUpi6U9WTCB+KTViGlfCtptPnLg+1dXhZ0Xqr52ECgsMVRN7DLdUahNB4d52BgpGzNveX2GVuFBlUuoQ7UA5CT4GCJk/+AGy3OeBjYFixVWe1tPxIDJUVsnZmmShQpPYWnNAZ5dxuF+FA7Nh1kLaaRO3DdkGNIR+eqnAg== </div>","categories":["tricks"],"tags":["dewdrops"]},{"title":"[露水]多看书有多重要","url":"http://halohoop.com/2017/06/06/dewdrops-importance-of-books/","content":"<p>多看书有多重要，为了拓展思维，在大脑留下更多的种子，也许你没有全部记住，但是你留下了种子，日后接触到相关的内容(肥料)的时候，你可以快速的回来生根发芽。</p>\n","categories":["tricks"],"tags":["dewdrops"]},{"title":"[饼干]安卓小秘密-不扩大view宽高增加其可触控范围","url":"http://halohoop.com/2017/06/06/cookies-android-touchdelegate/","content":"<h2 id=\"开门撞山：\"><a href=\"#开门撞山：\" class=\"headerlink\" title=\"开门撞山：\"></a>开门撞山：</h2><p>今天我要记录的是<strong>TouchDelegate</strong>，有很多人应该都不知道还有这个东西，知道的孩子都没你们事了，都散了散了吧，不知道的请往下看。其实也不算什么秘密，只要你仔细的走过神迹一样的事件分发的源码，很容易发现的。</p>\n<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><p>如下图，有这样一个场景，View a 需要有这么大，比如可以是一个按钮，UI要求显示View a的黑框部分，但是为了更好的用户体验，我们一般会增大其触控范围，比如点击绿框中都能够触发a的事件，咋做？（说好的不卖关子的呢？）</p>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo0.png\" alt=\"demo0\"></p>\n<h2 id=\"Don’t-do\"><a href=\"#Don’t-do\" class=\"headerlink\" title=\"Don’t do:\"></a>Don’t do:</h2><ul>\n<li>增加a的Padding?<ul>\n<li>后期如果修改bgColor，那么不好了，绿色框内全变色。</li>\n</ul>\n</li>\n<li>套多一层透明的FrameLayout？<ul>\n<li>增加布局复杂度，我TM一脚飞死你。 </li>\n</ul>\n</li>\n<li>自定义view限制绘制区域？<ul>\n<li>写完了？你很棒！但是你可以收拾包袱走人了。 </li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-should-do-How-to-use-TouchDelegate-：\"><a href=\"#What-should-do-How-to-use-TouchDelegate-：\" class=\"headerlink\" title=\"What should do (How to use TouchDelegate)：\"></a>What should do (How to use TouchDelegate)：</h2><p>要学会站在巨人的肩膀，要知道，<strong>“你遇到的，巨人也会遇到”</strong>，巨人给我们留下了<strong>TouchDelegate</strong></p>\n<h3 id=\"直接上菜：\"><a href=\"#直接上菜：\" class=\"headerlink\" title=\"直接上菜：\"></a>直接上菜：</h3><p>注意方法ViewGroup.setTouchDelegate(Rect,View)</p>\n<p>以下代码出自我一个自定义View—<a href=\"https://github.com/halohoop/UsoppBubble/blob/master/lib/src/main/java/com/halohoop/usoppbubble/widget/UsoppBubble.java\" target=\"_blank\" rel=\"external\">UsoppBubble.java</a></p>\n<pre><code>@Override\nprotected void onLayout(boolean changed, int left, int top, int right, int bottom) {\n    super.onLayout(changed, left, top, right, bottom);\n    if (changed) {\n        float largedSize = (bottom - top) * mTouchAreaLargerRatio;//乘以放大倍数\n        int deltaY = (int) (largedSize - (bottom - top));\n        int deltaX = largedSize &gt; (right - left) ? (int) (largedSize - (right - left)) : 0;\n        ViewGroup vg = (ViewGroup) getParent();\n        Rect rect = new Rect(left - deltaX, top - deltaY, right + deltaX, bottom + deltaY);\n        //构建出来的Rect对象就相当于绿色框框，而this就是这个view的实例。\n        vg.setTouchDelegate(new TouchDelegate(rect, this));\n    }\n}\n</code></pre><p>相信上述代码是极度容易的，ViewGroup.setTouchDelegate(Rect,View)接受两个参数：</p>\n<ul>\n<li>可触控区域。</li>\n<li>谁(哪个子view)需要用这个可触控区域。</li>\n</ul>\n<h2 id=\"实际应用场景\"><a href=\"#实际应用场景\" class=\"headerlink\" title=\"实际应用场景\"></a>实际应用场景</h2><ul>\n<li>QQ消息气泡可触控区域</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo1.png\" alt=\"demo1\"></p>\n<ul>\n<li>当然我也模仿qq做了一个<a href=\"https://github.com/halohoop/UsoppBubble\" target=\"_blank\" rel=\"external\">自己的消息气泡版本</a></li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo2.gif\" alt=\"demo2\"></p>\n<ul>\n<li>小米贴边悬浮球点击唤醒</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo3.png\" alt=\"demo3\"></p>\n<ul>\n<li>锤子的闪念胶囊贴边点击唤醒</li>\n</ul>\n<p><img src=\"/2017/06/06/cookies-android-touchdelegate/demo4.png\" alt=\"demo4\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>View.setTouchDelegate(Rect,View)，这句还不够吗？还要我怎样？</li>\n<li>你遇到的，巨人也会遇到，如果换位思考一下，你就是“巨人”，那么子View获取到的触摸事件是从ViewGroup分发下来的，那么如果在分发之前加一些条件判断，比如区域什么的，那么TouchDelegate这玩意儿是不是就出来了呢？</li>\n<li>Stay hungry stay foolish!</li>\n</ul>\n<p><em>仅作知识点记录，如有疏漏，全(欢)都(迎)怪(指)你(正)。</em></p>\n<hr>\n<p>确保这文章被看完了，我在上面留了一个无伤大雅的bug，不知道有人发现没有，那就是：</p>\n<p><em>setTouchDelegate其实是View的方法。而ViewGroup : View，无伤大雅。</em></p>\n","categories":["programming"],"tags":["cookies","view","android"]},{"title":"[饼干]Kotlin Trick 001-省略一些重复的工作","url":"http://halohoop.com/2017/06/05/cookies-kotlin-trick-001/","content":"<p>好的文章有时候不在于鸿篇巨制，而在于一目了然，有时候这种快餐小技巧更能帮助人，没有铺垫没有客套，直戳掌握知识的要害。所以从这篇开始会不间断的记录一些小技巧，文章已[饼干]开头的都是一篇短文。</p>\n<p>一些重复的工作，比如说我们在性能调优的时候经常用到的Trace，以下是一个实例：</p>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><pre><code>Trace.beginSection(sectionName);\ndoSomeCalculation();\nTrace.endSection();\n</code></pre><h2 id=\"Annoying：\"><a href=\"#Annoying：\" class=\"headerlink\" title=\"Annoying：\"></a>Annoying：</h2><p>如果在每个地方都加入<strong>Trace.beginSection(sectionName)和Trace.endSection()</strong>会疯掉的，搞不好还忘记加Trace.endSection()。</p>\n<h2 id=\"When-it-comes-to-Kotlin：\"><a href=\"#When-it-comes-to-Kotlin：\" class=\"headerlink\" title=\"When it comes to Kotlin：\"></a>When it comes to Kotlin：</h2><p>利用kotlin的扩展方法特性，我们能够这样操作</p>\n<pre><code>inline fun trace(sectionName: String, body: () -&gt; Unit) {\n    Trace.beginSection(sectionName)\n    try {\n        body()\n    } finally {\n        Trace.endSection()\n    }\n}\n//and use it\ntrace(&quot;foo&quot;) {\n    doSomeCalculation()\n}\n</code></pre><p>这样我们就可以把Trace.beginSection(sectionName)和Trace.endSection()省略了。<br>甚至你还可以有返回值：</p>\n<pre><code>inline fun &lt;T&gt; trace(sectionName: String, body: () -&gt; T): T {\n    Trace.beginSection(sectionName)\n    try {\n        return body()\n    } finally {\n        Trace.endSection()\n    }\n}\n\n//and use it\nval result = trace(&quot;foo&quot;) {\n    doSomeCalculation()\n}\n</code></pre><h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>实际上这种方式是方法拓展，lambda带给我们的额便利，同样的技巧，相信你能应用到Trace以外更多的地方，相信你能接触到更好的用法。</strong></p>\n","categories":["programming"],"tags":["cookies","android","kotlin"]},{"title":"[点心]小清新加载等待控件","url":"http://halohoop.com/2017/06/04/roll_loading/","content":"<p><em>本篇文章已授权微信公众号 guolin_blog （郭霖）独家发布</em></p>\n<p>控件源码：<a href=\"https://github.com/halohoop/RollSquareView\" target=\"_blank\" rel=\"external\">https://github.com/halohoop/RollSquareView</a></p>\n<p>正文</p>\n<p>背景<br>从锤子手机上看到的效果，锤子系统更新界面的入口按钮就是这个加载动画。</p>\n<p>效果图</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo3.gif\" alt=\"demo1\"> 图1(效果图1)</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo2.gif\" alt=\"demo2\"> 图2(效果图2)</p>\n<p>使用方式</p>\n<p><img src=\"/2017/06/04/roll_loading/roll_demo.png\" alt=\"demo3\"> 图3(使用说明图)</p>\n<ul>\n<li>half_rect_width:半个方块的宽度，单位dp</li>\n<li>rect_divier_width:方块之间间隔宽度，单位dp</li>\n<li>start_empty_position:初始空出的位置</li>\n<li>is_clockwise:是否顺时针旋转</li>\n<li>line_count:一行的数量，最少为3</li>\n<li>fix_round_cornor:固定的方框的圆角半径</li>\n<li>roll_round_cornor:旋转的方框的圆角半径，如果这两个圆角半径设置成不一样的值就会得到上面图1的效果，设置成一样就是图2.</li>\n<li>roll_when_show_stop_when_hide:是否自动开始自定旋转，如果设置为false，则需要手动调用startRoll()方法(下文会提到)才会开始运动，设置为true则设置View.Visibility就会自动开始旋转。</li>\n<li>square_color:方块的颜色。使用十六进制代码的形式（如：#333、#8e8e8e）</li>\n</ul>\n<p>讲解实现方法之前，首先要说明一下方格的排列方式是从左到右，从上到下，也就是如果line_count设置为3，那么方格的序号如下图：</p>\n<p><img src=\"/2017/06/04/roll_loading/notice1.png\" alt=\"demo3\"> 图4(序号排列说明)</p>\n<p>实现思路：<br>自定义控件最主要的就是如何去准备要展示给用户看的东西，东西有了之后，我们在onDraw方法里面按部就班的画出来就可以了。接下来就带大家来走一走我准备的整个过程。其实整个过程就像做菜，准备材料（准备数据），加调味料（处理初始数据），翻炒（编写逻辑），这一切都是在锅中完成的，这个锅就是我们的onDraw方法，我们把所有的一些都准备好，然后扔进锅（onDraw）里面。</p>\n<p>最终的绘制分为两步：</p>\n<ul>\n<li>绘制固定的方块</li>\n<li>绘制滚动的方块</li>\n</ul>\n<p>当运动的时候将固定的方框中的两个方块隐藏，然后让滚动的方块继承其中一个的位置，然后通过属性动画改变其位置的值以及旋转角度的值，最终调用invalidate()重绘让其动起来。</p>\n<p><img src=\"/2017/06/04/roll_loading/notice3.png\" alt=\"demo3\"> 图5(绘制原理图示)</p>\n<p>①（控件精髓就在此处）根据配置准备绘制的数据</p>\n<p>处理自定义属性：</p>\n<pre><code>private void initAttrs(Context context, AttributeSet attrs) {\n    TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.RollSquareView);\n    //行列数\n    mLineCount = typedArray.getInteger(R.styleable.RollSquareView_line_count, 3);\n    //旋转的方块圆角\n    mRollRoundCornor = typedArray.getFloat(R.styleable.RollSquareView_roll_round_cornor, 10);\n    ...\n    其他属性省略，请大家看源码\n\n    //开始的空格位置\n    mStartEmptyPosition = typedArray.getInteger(R.styleable.RollSquareView_start_empty_position, 0);\n    if (isInsideTheRect(mStartEmptyPosition, mLineCount)) {\n        mStartEmptyPosition = 0;\n    }\n    //当动态滚动的时候实时更新的空格位置\n    mCurrEmptyPosition = mStartEmptyPosition;\n    typedArray.recycle();\n}\n</code></pre><p>当选择空格位置不是外围的方块序号的时候，自动选择0位置，判断是否外围一圈的算法如下，纯数学知识：</p>\n<p><img src=\"/2017/06/04/roll_loading/notice2.png\" alt=\"demo3\"> 图6(绿色框出来的就是非外围的方块)</p>\n<pre><code>private boolean isInsideTheRect(int pos, int lineCount) {\n    if (pos &lt; lineCount) {//是否第一行\n        return false;\n    } else if (pos &gt; (lineCount * lineCount - 1 - lineCount)) {//是否最后一行\n        return false;\n    } else if ((pos + 1) % lineCount == 0) {//是否右边\n        return false;\n    } else if (pos % lineCount == 0) {//是否左边\n        return false;\n    }\n    //四边都不在，那就是在内部了\n    return true;\n}\n</code></pre><p>初始化方块的方法：</p>\n<pre><code>private void initSquares(int startEmptyPosition) {\n    //创建mLineCount * mLineCount个方块\n    mFixSquares = new FixSquare[mLineCount * mLineCount];\n    for (int i = 0; i &lt; mFixSquares.length; i++) {\n        mFixSquares[i] = new FixSquare();\n        mFixSquares[i].index = i;\n        mFixSquares[i].isShow = startEmptyPosition == i ? false : true;\n        mFixSquares[i].rectF = new RectF();\n    }\n    //外圈链接起来\n    linkTheOuterSquare(mFixSquares, mIsClockwise);//下文讲解\n    //创建1个滚动方块\n    mRollSquare = new RollSquare();\n    mRollSquare.rectF = new RectF();\n    mRollSquare.isShow = false;\n}\n</code></pre><p>两种方块都使用内部类定义，代码如下：</p>\n<pre><code>private class FixSquare {\n    RectF rectF;//需要绘制的方块\n    int index;//所在的序号\n    boolean isShow;//是否需要绘制\n    FixSquare next;//指向下一个需要滚动的位置，顺时针和逆时针相反\n}\n\nprivate class RollSquare {\n    RectF rectF;//需要绘制的方块\n    int index;//所在的序号\n    boolean isShow;//是否需要绘制\n    /**\n     * 旋转中心坐标\n     */\n    float cx;//滚动的时候的旋转中心x\n    float cy;//滚动的时候的旋转中心y\n}\n</code></pre><p>我们可以看到固定的方块FixSquare中有一个next变量：</p>\n<pre><code>FixSquare next;//指向下一个需要滚动的位置，顺时针和逆时针相反\n</code></pre><p>因为我们需要将外围的一圈方块都链接起来，但是现在有一个问题就是外围的方块序号并不是按照0、1、2…排列的，因此我定义了一个next变量用于指定其下一个，这样一个接一个的就把外围连成一圈了。算法如下，可能第一次看这个方法的小伙伴需要看一小会儿，因为需要适配行数3个以上的需求，因此都是动态变化的，因此都是一些数学公式，这里篇幅有限不一一讲解，大家可以顺着注释看看规律就很容易理解了，这个方法的主要目的就是为了让每个FixSquare的“FixSquare next”都赋上值，最终将外围都连成一圈，不要忘记考虑顺逆时针isClockwise这个变量哦：</p>\n<pre><code>private void linkTheOuterSquare(FixSquare[] fixSquares, boolean isClockwise) {\n    int lineCount = (int) Math.sqrt(mFixSquares.length);\n    //连接第一行\n    for (int i = 0; i &lt; lineCount; i++) {\n        if (i % lineCount == 0) {//位于最左边\n            fixSquares[i].next = isClockwise ? fixSquares[i + lineCount] : fixSquares[i + 1];\n        } else if ((i + 1) % lineCount == 0) {//位于最右边\n            fixSquares[i].next = isClockwise ? fixSquares[i - 1] : fixSquares[i + lineCount];\n        } else {//中间\n            fixSquares[i].next = isClockwise ? fixSquares[i - 1] : fixSquares[i + 1];\n        }\n    }\n    //连接最后一行\n    for (int i = (lineCount - 1) * lineCount; i &lt; lineCount * lineCount; i++) {\n        if (i % lineCount == 0) {//位于最左边\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - lineCount];\n        } else if ((i + 1) % lineCount == 0) {//位于最右边\n            fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i - 1];\n        } else {//中间\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - 1];\n        }\n    }\n    //连接左边\n    for (int i = 1 * lineCount; i &lt;= (lineCount - 1) * lineCount; i += lineCount) {\n        if (i == (lineCount - 1) * lineCount) {//如果是左下角的一个\n            fixSquares[i].next = isClockwise ? fixSquares[i + 1] : fixSquares[i - lineCount];\n            continue;\n        }\n        fixSquares[i].next = isClockwise ? fixSquares[i + lineCount] : fixSquares[i - lineCount];\n    }\n    //连接右边\n    for (int i = 2 * lineCount - 1; i &lt;= lineCount * lineCount - 1; i += lineCount) {\n        if (i == lineCount * lineCount - 1) {//如果是右下角的一个\n            fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i - 1];\n            continue;\n        }\n        fixSquares[i].next = isClockwise ? fixSquares[i - lineCount] : fixSquares[i + lineCount];\n    }\n}\n</code></pre><p>固定方块的位置，分别使用fixFixSquarePosition和fixRollSquarePosition两个方法来固定FixSquare和RollSquare：</p>\n<pre><code>private void fixFixSquarePosition(FixSquare[] fixSquares, int cx, int cy, float dividerWidth, float halfSquareWidth) {\n    //确定第一个rect的位置\n    float squareWidth = halfSquareWidth * 2;\n    int lineCount = (int) Math.sqrt(fixSquares.length);\n    float firstRectLeft = 0;\n    float firstRectTop = 0;\n    if (lineCount % 2 == 0) {//偶数\n        int squareCountInAline = lineCount / 2;\n        int diviCountInAline = squareCountInAline - 1;\n        float firstRectLeftTopFromCenter = squareCountInAline * squareWidth\n                + diviCountInAline * dividerWidth\n                + dividerWidth / 2;\n        firstRectLeft = cx - firstRectLeftTopFromCenter;\n        firstRectTop = cy - firstRectLeftTopFromCenter;\n    } else {//奇数\n        int squareCountInAline = lineCount / 2;\n        int diviCountInAline = squareCountInAline;\n        float firstRectLeftTopFromCenter = squareCountInAline * squareWidth\n                + diviCountInAline * dividerWidth\n                + halfSquareWidth;\n        firstRectLeft = cx - firstRectLeftTopFromCenter;\n        firstRectTop = cy - firstRectLeftTopFromCenter;\n    }\n    for (int i = 0; i &lt; lineCount; i++) {//行\n        for (int j = 0; j &lt; lineCount; j++) {//列\n            if (i == 0) {\n                if (j == 0) {\n                    fixSquares[0].rectF.set(firstRectLeft, firstRectTop,\n                            firstRectLeft + squareWidth, firstRectTop + squareWidth);\n                } else {\n                    int currIndex = i * lineCount + j;\n                    fixSquares[currIndex].rectF.set(fixSquares[currIndex - 1].rectF);\n                    fixSquares[currIndex].rectF.offset(dividerWidth + squareWidth, 0);\n                }\n            } else {\n                int currIndex = i * lineCount + j;\n                fixSquares[currIndex].rectF.set(fixSquares[currIndex - lineCount].rectF);\n                fixSquares[currIndex].rectF.offset(0, dividerWidth + squareWidth);\n            }\n        }\n    }\n}\n\nprivate void fixRollSquarePosition(FixSquare[] fixSquares,\n                                   RollSquare rollSquare, int startEmptyPosition) {\n    FixSquare fixSquare = fixSquares[startEmptyPosition];\n    rollSquare.rectF.set(fixSquare.next.rectF);\n}\n</code></pre><p>对于方法fixFixSquarePosition：</p>\n<ul>\n<li>通过参数有控件的中点的x和y坐标，cx和cy，加上行数，方块的宽以及方块间隔;</li>\n<li>通过以上参数很容易就可以通过计算得出第0个方块的left和top值，分别是firstRectLeft和firstRectTop；</li>\n<li>因为行数可能是奇数也可能是偶数，所以分为奇数和偶数两种计算方式；</li>\n<li>然后我把第一行的方块都固定下来之后，剩下的方块只需要往下平移即可固定下来了；</li>\n<li>第一个for循环表示行，第二个表示列，都是简单的数学计数知识，不过多阐述。</li>\n</ul>\n<p>对于方法fixRollSquarePosition：</p>\n<ul>\n<li>因为我们已经从初始化的操作中知道哪一个位置是空的，startEmptyPosition；</li>\n<li>而且已经把外围的方块连成了环（通过next关联），上文的linkTheOuterSquare方法；</li>\n<li>因此可以很容易确定下来旋转的方块所要开始运动的初始位置。</li>\n</ul>\n<p>②两种运动，平移 和 90度旋转</p>\n<p>这里主要讲解一下思路，使用属性动画创建两个动画，一个是平移动画，一个是旋转动画，如下图，然后使用AnimatorSet将两个连接起来，同时运行。</p>\n<p><img src=\"/2017/06/04/roll_loading/notice4.png\" alt=\"demo3\">图7（平移动画）</p>\n<p><img src=\"/2017/06/04/roll_loading/notice5.png\" alt=\"demo3\">图8（旋转动画）</p>\n<ul>\n<li>由于篇幅有限，加之方法比较长，这里不贴出，感兴趣的朋友可以去原码查看：</li>\n<li>createTranslateValueAnimator方法 和 createRollValueAnimator方法；</li>\n<li>其中值得关注的点是：需要考虑顺逆时针，以及实时更新旋转方块的旋转中心，因为平移过程中旋转中心也会跟着改变的，因此需要改变RollSquare的cx和cy，具体的逻辑就在setRollSquareRotateCenter方法中，调用的时机当然就是在动画运动的过程中啦（见onAnimationUpdate）。</li>\n</ul>\n<p>③循环起来把</p>\n<ul>\n<li>通过调用startRoll方法，会创建一次动画，当动画结束的时候（onAnimationEnd），重新调用startRoll方法，以达到循环的目的。这里相信大家都明白，就跟handler循环发送消息一样。</li>\n<li>这里有一点需要注意的就是如果动画速度调的很快，那么会导致ValueAnimator动画对象频繁重复的创建，可能会有内存抖动的风险；因此建议使用者不要将速度调的太块，不过这个控件的后期的迭代我可能将这个动画对象换成始终只有一个ValueAnimator的情况。</li>\n</ul>\n<p>④停止条件</p>\n<ul>\n<li>在动画结束准备重新调用startRoll方法之前做一个变量判断，来控制是否需要循环调用，如下：</li>\n</ul>\n<pre><code>if (mAllowRoll) {\n    startRoll();\n}\n</code></pre><ul>\n<li>当我们调用stopRoll方法的时候，mAllowRoll会变为false，调用startRoll的时候，mAllowRoll会变为true；</li>\n</ul>\n<p>⑤最后，画出来</p>\n<pre><code>@Override\nprotected void onDraw(Canvas canvas) {\n    for (int i = 0; i &lt; mFixSquares.length; i++) {\n        if (mFixSquares[i].isShow) {\n            canvas.drawRoundRect(mFixSquares[i].rectF, mFixRoundCornor, mFixRoundCornor, mPaint);\n        }\n    }\n    if (mRollSquare.isShow) {\n        canvas.rotate(mIsClockwise ? mRotateDegree : -mRotateDegree, mRollSquare.cx, mRollSquare.cy);\n        canvas.drawRoundRect(mRollSquare.rectF, mRollRoundCornor, mRollRoundCornor, mPaint);\n    }\n}\n</code></pre><p>上文也有提到，最终的绘制分为两步：</p>\n<ol>\n<li>绘制固定的方块</li>\n<li>绘制滚动的方块；</li>\n</ol>\n<p>如果读者还有不明朗的地方，欢迎查看源码，并且给我提bug，一起为这个社区做出自己的微薄贡献。</p>\n","categories":["programming"],"tags":["android","effect","snacks","custom_view"]},{"title":"我觉得我的博文标签是这样分类的","url":"http://halohoop.com/1970/01/01/tags-notes/","content":"<h4 id=\"露水-dewdrops\"><a href=\"#露水-dewdrops\" class=\"headerlink\" title=\"[露水]dewdrops\"></a>[露水]dewdrops</h4><ul>\n<li>琐事，生活体会，心灵鸡汤，更小的技巧等等…</li>\n</ul>\n<h4 id=\"饼干-cookies\"><a href=\"#饼干-cookies\" class=\"headerlink\" title=\"[饼干]cookies\"></a>[饼干]cookies</h4><ul>\n<li>小技巧，小知识点，等等…</li>\n</ul>\n<h4 id=\"点心-snacks\"><a href=\"#点心-snacks\" class=\"headerlink\" title=\"[点心]snacks\"></a>[点心]snacks</h4><ul>\n<li>再大一点的技巧，再大一点的知识点，等等…</li>\n</ul>\n<h4 id=\"大餐-meals\"><a href=\"#大餐-meals\" class=\"headerlink\" title=\"[大餐]meals\"></a>[大餐]meals</h4><ul>\n<li>需要花一些时间的东西，自定义控件，等等…</li>\n</ul>\n<h4 id=\"盛宴-feast\"><a href=\"#盛宴-feast\" class=\"headerlink\" title=\"[盛宴]feast\"></a>[盛宴]feast</h4><ul>\n<li>比较经典的东西，比如某个重要知识点的核心原码分析，等等…</li>\n</ul>\n<h4 id=\"仙丹-elixir\"><a href=\"#仙丹-elixir\" class=\"headerlink\" title=\"[仙丹]elixir\"></a>[仙丹]elixir</h4><ul>\n<li>鸿篇巨制，比如整个项目的分析，等等…</li>\n</ul>\n","categories":["notes"],"tags":["notes"]},{"title":"Hello World","url":"http://halohoop.com/1970/01/01/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","categories":["Hexo教程"],"tags":["tuts","hexo"]},{"title":"category","url":"http://halohoop.com/category/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://halohoop.com/project/index.html","content":"","categories":[],"tags":[]},{"title":"link","url":"http://halohoop.com/link/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://halohoop.com/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://halohoop.com/tag/index.html","content":"","categories":[],"tags":[]},{"title":"about","url":"http://halohoop.com/about/index.html","content":"","categories":[],"tags":[]}]